#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è handlers/assistant_onboarding.py
–î–æ–±–∞–≤–ª—è–µ—Ç –ª–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î
"""

import re
import os
import shutil
from datetime import datetime


def fix_assistant_onboarding():
    file_path = "handlers/assistant_onboarding.py"

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy2(file_path, backup_path)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(file_path, "r", encoding="utf-8") as f:
        content = f.read()

    # 1. –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î
    old_db_init = """# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = FirestoreDB()
profile_db = AssistantProfileDB(db.db)"""

    new_db_init = """# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ë–î (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
_db: Optional[FirestoreDB] = None
_profile_db: Optional[AssistantProfileDB] = None

def get_db():
    \"\"\"–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)\"\"\"
    global _db, _profile_db
    if _db is None:
        _db = FirestoreDB()
        if _db.is_connected():
            _profile_db = AssistantProfileDB(_db.get_client())
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            _profile_db = None
    return _db, _profile_db"""

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É
    content = content.replace(old_db_init, new_db_init)

    # 2. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î –≤ —Ñ—É–Ω–∫—Ü–∏–∏
    functions_to_update = [
        "start_onboarding_command",
        "start_ai_onboarding",
        "restart_onboarding_confirmed",
        "process_category_choice",
        "process_select_answer",
        "process_text_input",
        "process_number_input",
        "process_date_input",
        "process_list_input",
        "process_quick_date",
        "process_quick_number",
        "show_plan_settings",
        "show_current_plan",
        "finalize_onboarding",
    ]

    # –ö–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–π
    db_check_code = """    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    """

    db_check_code_message = """    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    """

    for func_name in functions_to_update:
        # –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é
        func_pattern = rf'(async def {func_name}\([^)]+\):\s*\n\s*"""[^"]*""")\n'

        def replacer(match):
            func_def = match.group(1)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            if "message:" in func_def:
                return func_def + "\n" + db_check_code_message + "\n"
            else:
                return func_def + "\n" + db_check_code + "\n"

        content = re.sub(func_pattern, replacer, content)

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Optional –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if "from typing import" in content and "Optional" not in content:
        content = content.replace(
            "from typing import Dict, Any, List", "from typing import Dict, Any, List, Optional"
        )

    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
    print("\n–ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("1. –ó–∞–º–µ–Ω–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –Ω–∞ –ª–µ–Ω–∏–≤—É—é")
    print("2. –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è get_db()")
    print("3. –í –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î")
    print("\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é!")


if __name__ == "__main__":
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ handlers/assistant_onboarding.py\n")

    if not os.path.exists("handlers/assistant_onboarding.py"):
        print("‚ùå –§–∞–π–ª handlers/assistant_onboarding.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        exit(1)

    response = input("–ù–∞—á–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? (y/n): ")
    if response.lower() == "y":
        fix_assistant_onboarding()
    else:
        print("–û—Ç–º–µ–Ω–µ–Ω–æ")
