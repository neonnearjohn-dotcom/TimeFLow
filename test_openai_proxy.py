"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã OpenAI API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
"""

import os
import asyncio
import httpx
from dotenv import load_dotenv

load_dotenv()


async def test_proxy():
    """–¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
    proxy_url = os.getenv("PROXY_URL")

    if not proxy_url:
        print("‚ùå PROXY_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        print("PROXY_URL=http://your-proxy:port")
        print("–∏–ª–∏")
        print("PROXY_URL=socks5://your-proxy:port")
        return False

    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ–∫—Å–∏: {proxy_url}")

    try:
        async with httpx.AsyncClient(proxies=proxy_url, timeout=10.0) as client:
            response = await client.get("http://httpbin.org/ip")
            data = response.json()
            print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–∞—à IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {data['origin']}")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        return False


async def test_openai():
    """–¢–µ—Å—Ç OpenAI API"""
    api_key = os.getenv("OPENAI_API_KEY")
    proxy_url = os.getenv("PROXY_URL")

    if not api_key or api_key == "–≤–∞—à_–∫–ª—é—á_api_–æ—Ç_openai":
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        print("OPENAI_API_KEY=sk-proj-xxxxxxxxxxxxx")
        return

    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É—é OpenAI API...")

    try:
        import openai

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏
        if proxy_url:
            http_client = httpx.AsyncClient(proxies=proxy_url, timeout=30.0)
            client = openai.AsyncOpenAI(api_key=api_key, http_client=http_client)
            print(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy_url}")
        else:
            client = openai.AsyncOpenAI(api_key=api_key)
            print("üì° –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)")

        # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ."},
                {"role": "user", "content": "–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç, —è —Ä–∞–±–æ—Ç–∞—é!' –Ω–∞ —Ä—É—Å—Å–∫–æ–º"},
            ],
            max_tokens=50,
        )

        answer = response.choices[0].message.content
        print(f"‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìù –û—Ç–≤–µ—Ç: {answer}")
        print(f"üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")

        if "Connection error" in str(e):
            print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏")
            print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä")
        elif "Incorrect API key" in str(e):
            print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ")
        elif "Rate limit" in str(e):
            print("\nüí° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")


async def main():
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPENAI –° –ü–†–û–ö–°–ò ===\n")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(
        f"OPENAI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('OPENAI_API_KEY') else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
    )
    print(f"PROXY_URL: {os.getenv('PROXY_URL') or '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
    if os.getenv("PROXY_URL"):
        proxy_works = await test_proxy()
        if not proxy_works:
            print("\n‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. OpenAI API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI
    await test_openai()

    print("\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")


if __name__ == "__main__":
    asyncio.run(main())
