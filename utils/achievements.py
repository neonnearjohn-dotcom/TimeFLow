"""
–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –æ—á–∫–æ–≤
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
"""

from typing import Dict, List, Optional, Tuple
from datetime import datetime

# === –¢–ê–ë–õ–ò–¶–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –û–ß–ö–û–í ===
# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—á–∫–æ–≤ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

POINTS_TABLE = {
    # –ü—Ä–∏–≤—ã—á–∫–∏
    "habit_completed": 5,  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    "habit_streak_bonus": 10,  # –ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å streak –ø—Ä–∏–≤—ã—á–∫–∏
    # –í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    "bad_habit_day": 3,  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    "bad_habit_milestone": 20,  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ (7, 30, 100 –¥–Ω–µ–π)
    # –§–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏
    "focus_per_minute": 1,  # –ó–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Ñ–æ–∫—É—Å–∞
    "focus_session_complete": 5,  # –ë–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    # –ß–µ–∫-–ª–∏—Å—Ç (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    "task_urgent_important": 10,  # –í–∞–∂–Ω–æ –∏ —Å—Ä–æ—á–Ω–æ
    "task_not_urgent_important": 8,  # –í–∞–∂–Ω–æ, –Ω–æ –Ω–µ —Å—Ä–æ—á–Ω–æ
    "task_urgent_not_important": 5,  # –°—Ä–æ—á–Ω–æ, –Ω–æ –Ω–µ –≤–∞–∂–Ω–æ
    "task_not_urgent_not_important": 3,  # –ù–µ –≤–∞–∂–Ω–æ –∏ –Ω–µ —Å—Ä–æ—á–Ω–æ
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    "achievement_common": 10,  # –û–±—ã—á–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    "achievement_rare": 25,  # –†–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    "achievement_epic": 50,  # –≠–ø–∏—á–µ—Å–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    "achievement_legendary": 100,  # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
}

# === –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===
# –ö–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç: id, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —É—Å–ª–æ–≤–∏–µ, —Ä–µ–¥–∫–æ—Å—Ç—å, —ç–º–æ–¥–∑–∏

ACHIEVEMENTS = {
    # === STREAK –ü–†–ò–í–´–ß–ï–ö ===
    "habit_streak_3": {
        "name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
        "description": "3 –¥–Ω—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏",
        "condition": {"type": "habit_streak", "value": 3},
        "rarity": "common",
        "emoji": "‚Ä¢",
        "points": POINTS_TABLE["achievement_common"],
    },
    "habit_streak_7": {
        "name": "–ù–µ–¥–µ–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã",
        "description": "7 –¥–Ω–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏",
        "condition": {"type": "habit_streak", "value": 7},
        "rarity": "common",
        "emoji": "‚Ä¢",
        "points": POINTS_TABLE["achievement_common"],
    },
    "habit_streak_21": {
        "name": "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏",
        "description": "21 –¥–µ–Ω—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "condition": {"type": "habit_streak", "value": 21},
        "rarity": "rare",
        "emoji": "‚ñ∏",
        "points": POINTS_TABLE["achievement_rare"],
    },
    "habit_streak_50": {
        "name": "–£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "description": "50 –¥–Ω–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "condition": {"type": "habit_streak", "value": 50},
        "rarity": "epic",
        "emoji": "‚óÜ",
        "points": POINTS_TABLE["achievement_epic"],
    },
    "habit_streak_100": {
        "name": "–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã",
        "description": "100 –¥–Ω–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "condition": {"type": "habit_streak", "value": 100},
        "rarity": "legendary",
        "emoji": "‚òÖ",
        "points": POINTS_TABLE["achievement_legendary"],
    },
    # === –§–û–ö–£–°-–°–ï–°–°–ò–ò ===
    "focus_sessions_10": {
        "name": "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è",
        "description": "–ó–∞–≤–µ—Ä—à–∏—Ç—å 10 —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π",
        "condition": {"type": "focus_sessions", "value": 10},
        "rarity": "common",
        "emoji": "‚Ä¢",
        "points": POINTS_TABLE["achievement_common"],
    },
    "focus_sessions_50": {
        "name": "–ì–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞",
        "description": "–ó–∞–≤–µ—Ä—à–∏—Ç—å 50 —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π",
        "condition": {"type": "focus_sessions", "value": 50},
        "rarity": "rare",
        "emoji": "‚ñ∏",
        "points": POINTS_TABLE["achievement_rare"],
    },
    "focus_sessions_100": {
        "name": "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "description": "–ó–∞–≤–µ—Ä—à–∏—Ç—å 100 —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π",
        "condition": {"type": "focus_sessions", "value": 100},
        "rarity": "epic",
        "emoji": "‚óÜ",
        "points": POINTS_TABLE["achievement_epic"],
    },
    "focus_hours_100": {
        "name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º",
        "description": "100 —á–∞—Å–æ–≤ –≤ —Ñ–æ–∫—É—Å–µ",
        "condition": {"type": "focus_hours", "value": 100},
        "rarity": "legendary",
        "emoji": "‚òÖ",
        "points": POINTS_TABLE["achievement_legendary"],
    },
    # === –ó–ê–î–ê–ß–ò –ß–ï–ö-–õ–ò–°–¢–ê ===
    "tasks_completed_10": {
        "name": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å 10 –∑–∞–¥–∞—á",
        "condition": {"type": "tasks_completed", "value": 10},
        "rarity": "common",
        "emoji": "‚Ä¢",
        "points": POINTS_TABLE["achievement_common"],
    },
    "tasks_completed_50": {
        "name": "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å 50 –∑–∞–¥–∞—á",
        "condition": {"type": "tasks_completed", "value": 50},
        "rarity": "rare",
        "emoji": "‚ñ∏",
        "points": POINTS_TABLE["achievement_rare"],
    },
    "tasks_completed_100": {
        "name": "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å 100 –∑–∞–¥–∞—á",
        "condition": {"type": "tasks_completed", "value": 100},
        "rarity": "epic",
        "emoji": "‚óÜ",
        "points": POINTS_TABLE["achievement_epic"],
    },
    # === –í–†–ï–î–ù–´–ï –ü–†–ò–í–´–ß–ö–ò ===
    "bad_habit_free_7": {
        "name": "–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è",
        "description": "7 –¥–Ω–µ–π –±–µ–∑ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏",
        "condition": {"type": "bad_habit_free", "value": 7},
        "rarity": "common",
        "emoji": "‚Ä¢",
        "points": POINTS_TABLE["achievement_common"],
    },
    "bad_habit_free_30": {
        "name": "–ú–µ—Å—è—Ü –∫–æ–Ω—Ç—Ä–æ–ª—è",
        "description": "30 –¥–Ω–µ–π –±–µ–∑ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏",
        "condition": {"type": "bad_habit_free", "value": 30},
        "rarity": "rare",
        "emoji": "‚ñ∏",
        "points": POINTS_TABLE["achievement_rare"],
    },
    "bad_habit_free_100": {
        "name": "–ü–æ–±–µ–¥–∞ –Ω–∞–¥ —Å–æ–±–æ–π",
        "description": "100 –¥–Ω–µ–π –±–µ–∑ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏",
        "condition": {"type": "bad_habit_free", "value": 100},
        "rarity": "epic",
        "emoji": "‚óÜ",
        "points": POINTS_TABLE["achievement_epic"],
    },
    # === –ü–ï–†–í–´–ï –®–ê–ì–ò ===
    "first_habit": {
        "name": "–ù–∞—á–∞–ª–æ –ø—É—Ç–∏",
        "description": "–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É",
        "condition": {"type": "first_action", "value": "habit"},
        "rarity": "common",
        "emoji": "‚Ä¢",
        "points": POINTS_TABLE["achievement_common"],
    },
    "first_focus": {
        "name": "–ü–µ—Ä–≤—ã–π —Ñ–æ–∫—É—Å",
        "description": "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–≤—É—é —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é",
        "condition": {"type": "first_action", "value": "focus"},
        "rarity": "common",
        "emoji": "‚Ä¢",
        "points": POINTS_TABLE["achievement_common"],
    },
    "first_task": {
        "name": "–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞",
        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É",
        "condition": {"type": "first_action", "value": "task"},
        "rarity": "common",
        "emoji": "‚Ä¢",
        "points": POINTS_TABLE["achievement_common"],
    },
    # === –ö–û–ú–ë–û –ò –û–°–û–ë–´–ï ===
    "all_modules_used": {
        "name": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
        "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏ –±–æ—Ç–∞",
        "condition": {"type": "special", "value": "all_modules"},
        "rarity": "rare",
        "emoji": "‚ñ∏",
        "points": POINTS_TABLE["achievement_rare"],
    },
    "early_bird": {
        "name": "–†–∞–Ω–Ω–µ–µ –Ω–∞—á–∞–ª–æ",
        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –¥–æ 7 —É—Ç—Ä–∞",
        "condition": {"type": "special", "value": "early_bird"},
        "rarity": "common",
        "emoji": "‚Ä¢",
        "points": POINTS_TABLE["achievement_common"],
    },
    "night_owl": {
        "name": "–ù–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        "description": "–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏",
        "condition": {"type": "special", "value": "night_owl"},
        "rarity": "common",
        "emoji": "‚Ä¢",
        "points": POINTS_TABLE["achievement_common"],
    },
}


def get_achievement_message(achievement_id: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    """
    achievement = ACHIEVEMENTS.get(achievement_id)
    if not achievement:
        return ""

    emoji = achievement["emoji"]
    name = achievement["name"]
    description = achievement["description"]
    points = achievement["points"]

    rarity_messages = {
        "common": "–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
        "rare": "–†–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
        "epic": "–û—Å–æ–±–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
        "legendary": "–í—ã–¥–∞—é—â–µ–µ—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
    }

    rarity = achievement.get("rarity", "common")
    header = rarity_messages.get(rarity, "–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")

    return f"üèÜ <b>{header}</b>\n\n" f"{name}\n" f"{description}\n\n" f"–ù–∞–≥—Ä–∞–¥–∞: {points} –æ—á–∫–æ–≤"


def get_rarity_color(rarity: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    """
    colors = {
        "common": "#9CA3AF",  # –°–µ—Ä—ã–π
        "rare": "#3B82F6",  # –°–∏–Ω–∏–π
        "epic": "#8B5CF6",  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        "legendary": "#F59E0B",  # –ó–æ–ª–æ—Ç–æ–π
    }
    return colors.get(rarity, "#9CA3AF")


def calculate_points_for_task(priority: str) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    """
    points_map = {
        "urgent_important": POINTS_TABLE["task_urgent_important"],
        "not_urgent_important": POINTS_TABLE["task_not_urgent_important"],
        "urgent_not_important": POINTS_TABLE["task_urgent_not_important"],
        "not_urgent_not_important": POINTS_TABLE["task_not_urgent_not_important"],
    }
    return points_map.get(priority, 5)


def get_level_from_points(total_points: int) -> Tuple[int, int, int]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∫–æ–≤

    Returns:
        Tuple[int, int, int]: (—É—Ä–æ–≤–µ–Ω—å, –æ—á–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ, –æ—á–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è)
    """
    # –§–æ—Ä–º—É–ª–∞: –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç –Ω–∞ 50 –æ—á–∫–æ–≤ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    # –£—Ä–æ–≤–µ–Ω—å 1: 100 –æ—á–∫–æ–≤
    # –£—Ä–æ–≤–µ–Ω—å 2: 150 –æ—á–∫–æ–≤
    # –£—Ä–æ–≤–µ–Ω—å 3: 200 –æ—á–∫–æ–≤ –∏ —Ç.–¥.

    level = 1
    points_for_current_level = 0
    points_for_next_level = 100

    while total_points >= points_for_next_level:
        level += 1
        points_for_current_level = points_for_next_level
        points_for_next_level += 50 * level

    points_in_level = total_points - points_for_current_level
    points_to_next = points_for_next_level - total_points

    return level, points_in_level, points_to_next


def get_rank_by_level(level: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–≥ –ø–æ —É—Ä–æ–≤–Ω—é
    """
    ranks = {
        (1, 5): "–ù–æ–≤–∏—á–æ–∫",
        (6, 10): "–ü—Ä–∞–∫—Ç–∏–∫",
        (11, 20): "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
        (21, 30): "–≠–∫—Å–ø–µ—Ä—Ç",
        (31, 50): "–ú–∞—Å—Ç–µ—Ä",
        (51, 75): "–ì—É—Ä—É",
        (76, 100): "–õ–µ–≥–µ–Ω–¥–∞",
    }

    for (min_level, max_level), rank in ranks.items():
        if min_level <= level <= max_level:
            return rank

    return "–õ–µ–≥–µ–Ω–¥–∞"  # –î–ª—è —É—Ä–æ–≤–Ω–µ–π –≤—ã—à–µ 100


def check_achievements_for_user(user_stats: Dict) -> List[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    Args:
        user_stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    """
    unlockable = []

    for achievement_id, achievement in ACHIEVEMENTS.items():
        condition = achievement["condition"]
        condition_type = condition["type"]
        required_value = condition["value"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É—Å–ª–æ–≤–∏–π
        if condition_type == "habit_streak":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π streak —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫
            max_streak = user_stats.get("max_habit_streak", 0)
            if max_streak >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "focus_sessions":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            sessions = user_stats.get("total_focus_sessions", 0)
            if sessions >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "focus_hours":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ–∫—É—Å–µ
            minutes = user_stats.get("total_focus_minutes", 0)
            hours = minutes / 60
            if hours >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "tasks_completed":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            tasks = user_stats.get("total_tasks_completed", 0)
            if tasks >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "bad_habit_free":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –±–µ–∑ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
            max_days = user_stats.get("max_bad_habit_free_days", 0)
            if max_days >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "first_action":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            action = condition["value"]
            if action == "habit" and user_stats.get("has_habits", False):
                unlockable.append(achievement_id)
            elif action == "focus" and user_stats.get("has_focus_sessions", False):
                unlockable.append(achievement_id)
            elif action == "task" and user_stats.get("has_tasks", False):
                unlockable.append(achievement_id)

        elif condition_type == "special":
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            special_type = condition["value"]
            if special_type == "all_modules" and user_stats.get("used_all_modules", False):
                unlockable.append(achievement_id)
            elif special_type == "early_bird" and user_stats.get(
                "completed_task_before_7am", False
            ):
                unlockable.append(achievement_id)
            elif special_type == "night_owl" and user_stats.get(
                "focus_session_after_midnight", False
            ):
                unlockable.append(achievement_id)

    return unlockable


def check_achievements_for_user(user_stats: Dict, already_unlocked: List[str]) -> List[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    Args:
        user_stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        already_unlocked: –°–ø–∏—Å–æ–∫ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    """
    # bugfix: —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
    unlockable = []

    for achievement_id, achievement in ACHIEVEMENTS.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        if achievement_id in already_unlocked:
            continue

        condition = achievement["condition"]
        condition_type = condition["type"]
        required_value = condition["value"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É—Å–ª–æ–≤–∏–π
        if condition_type == "habit_streak":
            max_streak = user_stats.get("max_habit_streak", 0)
            if max_streak >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "focus_sessions":
            total_sessions = user_stats.get("total_focus_sessions", 0)
            if total_sessions >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "focus_hours":
            total_minutes = user_stats.get("total_focus_minutes", 0)
            total_hours = total_minutes // 60
            if total_hours >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "tasks_completed":
            total_tasks = user_stats.get("total_tasks_completed", 0)
            if total_tasks >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "points_earned":
            total_points = user_stats.get("total_points_earned", 0)
            if total_points >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "bad_habit_days":
            max_days = user_stats.get("max_bad_habit_days", 0)
            if max_days >= required_value:
                unlockable.append(achievement_id)

        elif condition_type == "checklist_streak":
            checklist_streak = user_stats.get("max_checklist_streak", 0)
            if checklist_streak >= required_value:
                unlockable.append(achievement_id)

    return unlockable
