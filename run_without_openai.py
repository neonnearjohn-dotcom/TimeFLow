"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –±–µ–∑ –º–æ–¥—É–ª—è OpenAI
"""
import os
import shutil
from datetime import datetime

print("=== –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê –ë–ï–ó OPENAI ===\n")

# 1. –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π utils/openai_api.py
openai_stub = '''"""
–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è OpenAI API (—Ä–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏)
"""
import logging

logger = logging.getLogger(__name__)

class OpenAIAssistant:
    """–ó–∞–≥–ª—É—à–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ OpenAI"""
    
    def __init__(self):
        self.is_configured = False
        logger.info("OpenAI Assistant —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ")
    
    async def send_message(self, message, context=None, scenario=None, max_tokens=500):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–º–æ-–æ—Ç–≤–µ—Ç—ã"""
        demo_responses = {
            'plan_day': """üìÖ **–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å**
                
–£—Ç—Ä–æ (9:00-12:00):
‚Ä¢ ‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ ‚òï –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç
‚Ä¢ üìß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É

–î–µ–Ω—å (12:00-17:00):
‚Ä¢ üçΩ –û–±–µ–¥
‚Ä¢ üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏
‚Ä¢ üìû –í—Å—Ç—Ä–µ—á–∏

–í–µ—á–µ—Ä (17:00-21:00):
‚Ä¢ üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ üìö –û–±—É—á–µ–Ω–∏–µ
‚Ä¢ üßò –û—Ç–¥—ã—Ö""",
            
            'motivation': """üí™ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è**
                
–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å!

üåü –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏.
üéØ –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º.
üí´ –í–µ—Ä—å –≤ —Å–µ–±—è!

–î–µ–π—Å—Ç–≤—É–π! üöÄ""",
            
            'default': """ü§ñ **–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ**
                
–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OpenAI API.

–ê –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
‚Ä¢ üìä –¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫
‚Ä¢ üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏
‚Ä¢ ‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–¥–∞—á
‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        }
        
        response = demo_responses.get(scenario, demo_responses['default'])
        
        return {
            'success': True,
            'response': response,
            'is_demo': True
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
assistant = OpenAIAssistant()
'''

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫—É
print("1. –°–æ–∑–¥–∞—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è OpenAI...")
os.makedirs("utils", exist_ok=True)

# –î–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
if os.path.exists("utils/openai_api.py"):
    backup_name = f"utils/openai_api_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
    shutil.copy("utils/openai_api.py", backup_name)
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")

with open("utils/openai_api.py", "w", encoding="utf-8") as f:
    f.write(openai_stub)
print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ utils/openai_api.py")

# 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ OpenAI.")
print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
print("‚Ä¢ üìä –¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫")
print("‚Ä¢ üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏ - —Ç–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
print("‚Ä¢ ‚úÖ –ß–µ–∫-–ª–∏—Å—Ç - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –ø–æ –º–∞—Ç—Ä–∏—Ü–µ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞")
print("‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å - –æ—á–∫–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
print("‚Ä¢ ü§ñ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç - –¥–µ–º–æ-–æ—Ç–≤–µ—Ç—ã –±–µ–∑ API")

print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
print("python main.py")

print("\nüí° –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–∑–∂–µ:")
print("1. –ü–æ–ª—É—á–∏—Ç–µ OpenAI API –∫–ª—é—á")
print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –†–æ—Å—Å–∏–∏")
print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python fix_openai_proxy.py")