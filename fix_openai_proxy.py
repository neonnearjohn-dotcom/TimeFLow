"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã OpenAI API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –†–æ—Å—Å–∏–∏
"""
import os

print("=== –ù–ê–°–¢–†–û–ô–ö–ê OPENAI –° –ü–†–û–ö–°–ò ===\n")

# 1. –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π utils/openai_api.py
openai_api_content = '''"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –†–æ—Å—Å–∏–∏)
"""
import os
import logging
from typing import Dict, List, Optional
import httpx
from dotenv import load_dotenv

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ openai
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai")

load_dotenv()
logger = logging.getLogger(__name__)


class OpenAIAssistant:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI GPT-4o-mini —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI"""
        self.api_key = os.getenv('OPENAI_API_KEY')
        self.proxy_url = os.getenv('PROXY_URL')  # –ù–∞–ø—Ä–∏–º–µ—Ä: http://proxy.example.com:8080
        self.model = "gpt-4o-mini"
        self.client = None
        self.is_configured = False
        
        if not OPENAI_AVAILABLE:
            logger.warning("OpenAI library not installed")
            return
            
        if self.api_key and self.api_key != "–≤–∞—à_–∫–ª—é—á_api_–æ—Ç_openai":
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º HTTP –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø—Ä–æ–∫—Å–∏
                if self.proxy_url:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx —Å –ø—Ä–æ–∫—Å–∏
                    http_client = httpx.AsyncClient(
                        proxies=self.proxy_url,
                        timeout=30.0
                    )
                    self.client = openai.AsyncOpenAI(
                        api_key=self.api_key,
                        http_client=http_client
                    )
                    logger.info(f"OpenAI client initialized with proxy: {self.proxy_url}")
                else:
                    # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ (–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –≤ –†–æ—Å—Å–∏–∏)
                    self.client = openai.AsyncOpenAI(api_key=self.api_key)
                    logger.info("OpenAI client initialized without proxy")
                    
                self.is_configured = True
            except Exception as e:
                logger.error(f"Failed to initialize OpenAI client: {e}")
                self.is_configured = False
        else:
            logger.warning("OpenAI API key not found in .env file")
    
    def get_system_prompt(self) -> str:
        """–ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        return """–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.
        
        –ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
        1. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        2. –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç–æ–Ω
        3. –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        4. –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        5. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º (–Ω–µ –±–æ–ª–µ–µ 200 —Å–ª–æ–≤ –Ω–∞ –æ—Ç–≤–µ—Ç)
        6. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
    
    def get_scenario_prompt(self, scenario: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        prompts = {
            'plan_day': """–ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å.
                –ó–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –µ–≥–æ –∑–∞–¥–∞—á–∞—Ö –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö.
                –ü—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏.
                –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç—Ä–∏—Ü—É –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏.""",
            
            'motivation': """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                –ù–∞–ø–æ–º–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –µ–≥–æ —Å–∏–ª–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.
                –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã.
                –ó–∞–≤–µ—Ä—à–∞–π –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é.""",
            
            'analyze_failure': """–ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—É–¥–∞—á—É –∏–ª–∏ —Å—Ä—ã–≤.
                –ë—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º.
                –ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—ã –∏ –∏–∑–≤–ª–µ—á—å —É—Ä–æ–∫–∏.
                –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.""",
            
            'habit_advice': """–î–∞–π —Å–æ–≤–µ—Ç –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫.
                –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏.
                –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
                –ü–æ–º–æ–≥–∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –ø—Ä–æ—â–µ –∏ –ø—Ä–∏—è—Ç–Ω–µ–µ."""
        }
        return prompts.get(scenario, "")
    
    async def send_message(
        self,
        message: str,
        context: Optional[List[Dict]] = None,
        scenario: Optional[str] = None,
        max_tokens: int = 500
    ) -> Dict:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ OpenAI API
        """
        
        # –ï—Å–ª–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
        if not self.is_configured or not OPENAI_AVAILABLE:
            return {
                'success': False,
                'response': self._get_demo_response(scenario or 'default'),
                'error': 'API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞',
                'is_demo': True
            }
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {"role": "system", "content": self.get_system_prompt()}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if scenario:
                scenario_prompt = self.get_scenario_prompt(scenario)
                if scenario_prompt:
                    messages.append({"role": "system", "content": scenario_prompt})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if context:
                messages.extend(context[-10:])  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.append({"role": "user", "content": message})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                max_tokens=max_tokens,
                temperature=0.7,
                top_p=0.9,
                frequency_penalty=0.3,
                presence_penalty=0.3
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            assistant_response = response.choices[0].message.content
            
            return {
                'success': True,
                'response': assistant_response,
                'usage': {
                    'prompt_tokens': response.usage.prompt_tokens,
                    'completion_tokens': response.usage.completion_tokens,
                    'total_tokens': response.usage.total_tokens
                }
            }
            
        except Exception as e:
            logger.error(f"Error in OpenAI API: {e}", exc_info=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return {
                'success': False,
                'response': self._get_demo_response(scenario or 'default'),
                'error': str(e),
                'is_demo': True
            }
    
    def _get_demo_response(self, scenario: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API –∫–ª—é—á–∞"""
        demo_responses = {
            'plan_day': """üìÖ **–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å (–¥–µ–º–æ)**
                
–£—Ç—Ä–æ (9:00-12:00):
‚Ä¢ ‚úÖ –°–∞–º–∞—è –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–Ω—è
‚Ä¢ ‚òï –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω
‚Ä¢ üìß –†–∞–∑–±–æ—Ä –ø–æ—á—Ç—ã

–î–µ–Ω—å (12:00-17:00):
‚Ä¢ üçΩ –û–±–µ–¥
‚Ä¢ üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏ –ø–æ 25 –º–∏–Ω
‚Ä¢ üìû –ó–≤–æ–Ω–∫–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏

–í–µ—á–µ—Ä (17:00-21:00):
‚Ä¢ üèÉ –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ üìö –í—Ä–µ–º—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ üßò –û—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

üí° –°–æ–≤–µ—Ç: –ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ!""",
            
            'motivation': """üí™ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è (–¥–µ–º–æ)**
                
–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è! 

üåü –ü–æ–º–Ω–∏: —Ç—ã —É–∂–µ –ø—Ä–æ–¥–µ–ª–∞–ª –±–æ–ª—å—à–æ–π –ø—É—Ç—å, –∏ –∫–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏.

–°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å:
‚Ä¢ –°–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª
‚Ä¢ –£–ª—É—á—à–∏—Ç—å –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É
‚Ä¢ –ü–æ–º–æ—á—å –∫–æ–º—É-—Ç–æ

–í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º! üöÄ""",
            
            'default': """ü§ñ **–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ**
                
–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ:
1. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á OpenAI
2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏ (–¥–ª—è –†–æ—Å—Å–∏–∏)
3. –î–æ–±–∞–≤–∏—Ç—å –≤ .env —Ñ–∞–π–ª:
   - OPENAI_API_KEY=–≤–∞—à_–∫–ª—é—á
   - PROXY_URL=–∞–¥—Ä–µ—Å_–ø—Ä–æ–∫—Å–∏

–ê –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞! üòä"""
        }
        
        return demo_responses.get(scenario, demo_responses['default'])


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
try:
    assistant = OpenAIAssistant()
except Exception as e:
    logger.error(f"Could not initialize OpenAI assistant: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class DummyAssistant:
        def __init__(self):
            self.is_configured = False
        
        async def send_message(self, *args, **kwargs):
            return {
                'success': False,
                'response': "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                'is_demo': True
            }
    
    assistant = DummyAssistant()
'''

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
os.makedirs("utils", exist_ok=True)
with open("utils/openai_api.py", "w", encoding="utf-8") as f:
    f.write(openai_api_content)

print("‚úÖ –°–æ–∑–¥–∞–Ω utils/openai_api.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏")

# 2. –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
print("\nüìù –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env:")
print("PROXY_URL=http://your-proxy-server:port")
print("# –ò–ª–∏ –¥–ª—è SOCKS5:")
print("PROXY_URL=socks5://your-proxy-server:port")

print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–∏—Å—ã –¥–ª—è OpenAI:")
print("1. Bright Data (brightdata.com)")
print("2. SmartProxy (smartproxy.com)")
print("3. Webshare (webshare.io)")
print("4. –í–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π VPS —Å –ø—Ä–æ–∫—Å–∏")

print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")