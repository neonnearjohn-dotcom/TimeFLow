"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""
import asyncio
import logging
import os
import sys
from venv import logger

from pytest import Config
from config import BOT_TOKEN

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
from database.firestore_db import FirestoreDB
from database.focus_db import FocusDB
from database.focus_db_memory import FocusDBMemory

# Focus –º–æ–¥—É–ª–∏
from services.focus_service import FocusService
from utils.focus_scheduler import focus_scheduler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers import start, menu, trackers, focus, checklist, profile, assistant, settings, assistant_onboarding, assistant_plan

from utils.logging import setup_json_logging, get_logger, set_request_id, setup_logging
from utils.notify import make_notifier
from utils.firestore_client import create_firestore_client

import signal
from typing import Optional
from google.cloud import firestore

from services.pomodoro_service import PomodoroService
from tasks.pomodoro_recovery import recovery_pass, start_scheduler

shutdown_event: Optional[asyncio.Event] = None
scheduler_task: Optional[asyncio.Task] = None

setup_json_logging("INFO")
log = get_logger(__name__)
log.info("Starting TimeFlow bot")

def CorrelationMiddleware():
    raise NotImplementedError

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global shutdown_event, scheduler_task
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = os.getenv("LOG_LEVEL", "INFO")
    setup_logging(level=log_level)
    
    logger.info("Starting TimeFlow Bot")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
    config = Config()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(
        token=config.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

    db = create_firestore_client()
    pomodoro_service = PomodoroService(db) if db else None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
    dp.update.middleware(CorrelationMiddleware())
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('bot.log', encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    logger = logging.getLogger(__name__)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML
        )
    )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
    dp = Dispatcher(storage=MemoryStorage())
    
    # --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FOCUS ---
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Focus –º–æ–¥—É–ª—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await focus_scheduler.start()
        logger.info("Focus –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Firestore
        try:
            db = FirestoreDB()
            focus_db = FocusDB(db.db)
            logger.info("Focus –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Firestore")
        except Exception as db_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firestore: {db_error}")
            logger.info("Focus –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø–∞–º—è—Ç–∏ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory –≤–µ—Ä—Å–∏—é –ë–î
            focus_db = FocusDBMemory()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        focus_service = FocusService(focus_db, focus_scheduler, bot)
        logger.info("FocusService —Å–æ–∑–¥–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        restored_count = await focus_service.restore_active_sessions()
        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        
        # üëâ –ò–Ω—ä–µ–∫—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤ –º–æ–¥—É–ª—å handlers.focus
        from handlers import focus as focus_handlers
        focus_handlers.focus_service = focus_service
        logger.info("FocusService –∏–Ω—ä–µ—Ü–∏—Ä–æ–≤–∞–Ω –≤ handlers.focus")

    
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Focus –º–æ–¥—É–ª—è: {e}", exc_info=True)
        focus_service = None
    
    notify = make_notifier(bot)
    if pomodoro_service:
        logger.info("Running Pomodoro recovery pass")
        await recovery_pass(service=pomodoro_service, notify=notify)
        shutdown_event = asyncio.Event()
        scheduler_task = asyncio.create_task(
            start_scheduler(
                service=pomodoro_service,
                notify=notify,
                interval_sec=30,
                shutdown_event=shutdown_event,
            )
        )
    else:
        logger.error("PomodoroService not initialized; skipping scheduler")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    def signal_handler(sig, frame):
        logger.info(f"Received signal {sig}, initiating shutdown")
        shutdown_event.set()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –†–û–£–¢–ï–†–û–í ---
    dp.include_router(start.router)
    dp.include_router(menu.router)
    dp.include_router(trackers.router)
    dp.include_router(focus.router)
    dp.include_router(checklist.router)
    dp.include_router(profile.router)
    dp.include_router(assistant.router)
    dp.include_router(settings.router)    
    dp.include_router(assistant_onboarding.router)
    dp.include_router(assistant_plan.router)
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫–∏ (–µ—Å–ª–∏ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
    await bot.delete_webhook(drop_pending_updates=True)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        # –ó–∞–ø—É—Å–∫ polling –∏–ª–∏ webhook –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ENV
        if config.env == "dev":
            logger.info("Starting in polling mode (dev)")
            await dp.start_polling(bot)
        else:
            logger.info("Starting in webhook mode (prod)")
            # webhook setup –±—É–¥–µ—Ç –∑–¥–µ—Å—å
            pass
    finally:
        # Graceful shutdown
        logger.info("Shutting down...")
        shutdown_event.set()
        
        if scheduler_task and not scheduler_task.done():
            await scheduler_task
        
        await bot.session.close()
        logger.info("Bot stopped")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)