"""
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –±–µ–∑ Firestore
"""
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import BOT_TOKEN

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    
    buttons = [
        KeyboardButton(text="üìä –¢—Ä–µ–∫–µ—Ä—ã"),
        KeyboardButton(text="‚úÖ –ß–µ–∫-–ª–∏—Å—Ç"),
        KeyboardButton(text="üéØ –§–æ–∫—É—Å"),
        KeyboardButton(text="ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"),
        KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    ]
    
    for button in buttons:
        builder.add(button)
    
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
        f"üîß <b>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º</b> (–±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)\n"
        f"–¢–≤–æ–π Telegram ID: <code>{message.from_user.id}</code>\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )

@router.message(F.text == "üìä –¢—Ä–µ–∫–µ—Ä—ã")
async def handle_trackers(message: Message):
    await message.answer(
        "üìä <b>–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫</b>\n\n"
        "‚ö†Ô∏è –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Firestore.",
        parse_mode="HTML"
    )

@router.message(F.text == "üéØ –§–æ–∫—É—Å")
async def handle_focus(message: Message):
    await message.answer(
        "üéØ <b>–§–æ–∫—É—Å-—Ä–µ–∂–∏–º</b>\n\n"
        "‚ö†Ô∏è –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ç–∞–π–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Firestore.",
        parse_mode="HTML"
    )

@router.message(F.text == "‚úÖ –ß–µ–∫-–ª–∏—Å—Ç")
async def handle_checklist(message: Message):
    await message.answer("‚úÖ –†–∞–∑–¥–µ–ª —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

@router.message(F.text == "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
async def handle_assistant(message: Message):
    await message.answer("ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile(message: Message):
    await message.answer("üë§ –ü—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(message: Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher(storage=MemoryStorage())
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    
    logger.info("üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (–±–µ–∑ Firestore)!")
    logger.info(f"–í–∞—à —Ç–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...{BOT_TOKEN[-5:]}")
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())