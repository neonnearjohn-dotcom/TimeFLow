"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ - –∑–∞–ø—É—Å–∫ –∑–∞ 10 —Å–µ–∫—É–Ω–¥
"""
import os

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º states/assistant.py
states_content = '''"""
FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""
from aiogram.fsm.state import State, StatesGroup


class AssistantStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"""
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    in_assistant_mode = State()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
    chatting = State()
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    waiting_response = State()
'''

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º utils/openai_api.py
openai_content = '''"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API
"""
import os
from typing import Optional, Tuple
import logging
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é OpenAI –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
try:
    from openai import AsyncOpenAI
    OPENAI_NEW_VERSION = True
except ImportError:
    import openai
    OPENAI_NEW_VERSION = False


class OpenAIAssistant:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI GPT API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI"""
        self.api_key = os.getenv('OPENAI_API_KEY', 'your-openai-api-key-here')
        self.model = "gpt-4o-mini"
        
        try:
            if self.api_key and self.api_key != 'your-openai-api-key-here':
                if OPENAI_NEW_VERSION:
                    # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è - –ë–ï–ó proxies
                    self.client = AsyncOpenAI(api_key=self.api_key)
                else:
                    # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
                    openai.api_key = self.api_key
                    self.client = None
                self.is_configured = True
                print("OpenAI client initialized successfully")
            else:
                self.client = None
                self.is_configured = False
                print("OpenAI API key not configured - using demo mode")
        except Exception as e:
            print(f"Failed to initialize OpenAI client: {e}")
            self.client = None
            self.is_configured = False
    
    async def get_chat_response(self, user_message: str, context: str = "") -> Tuple[Optional[str], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT"""
        if not self.is_configured:
            return None, 0
        
        try:
            messages = [
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."},
                {"role": "user", "content": user_message}
            ]
            
            if OPENAI_NEW_VERSION and self.client:
                response = await self.client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    max_tokens=500
                )
                return response.choices[0].message.content, response.usage.total_tokens
            else:
                # –î–ª—è —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                response = openai.ChatCompletion.create(
                    model=self.model,
                    messages=messages,
                    max_tokens=500
                )
                return response.choices[0].message.content, response.usage.total_tokens
                
        except Exception as e:
            logger.error(f"Error: {e}")
            return None, 0
    
    async def get_scenario_response(self, scenario: str, context: str = "") -> Tuple[Optional[str], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        prompts = {
            'plan': "–ü–æ–º–æ–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–Ω—è –ø–æ –º–∞—Ç—Ä–∏—Ü–µ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞.",
            'motivation': "–°–æ–∑–¥–∞–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            'failure': "–ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–µ—É–¥–∞—á—É –∏ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ.",
            'habits': "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫."
        }
        
        prompt = prompts.get(scenario, "–ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return await self.get_chat_response(prompt, context)
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
        return self.is_configured
'''

# –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
os.makedirs('states', exist_ok=True)
os.makedirs('utils', exist_ok=True)

with open('states/assistant.py', 'w', encoding='utf-8') as f:
    f.write(states_content)
print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω states/assistant.py")

with open('utils/openai_api.py', 'w', encoding='utf-8') as f:
    f.write(openai_content)
print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω utils/openai_api.py")

print("\nüöÄ –ì–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")