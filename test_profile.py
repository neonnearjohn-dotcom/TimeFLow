"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import BOT_TOKEN

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

def get_test_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    builder = ReplyKeyboardBuilder()
    
    buttons = [
        KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î"),
        KeyboardButton(text="üèÜ –¢–µ—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
    ]
    
    for button in buttons:
        builder.add(button)
    
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º.\n"
        f"–¢–≤–æ–π ID: {message.from_user.id}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_test_keyboard()
    )

@router.message(F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î")
async def check_db(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    try:
        from database.firestore_db import FirestoreDB
        db = FirestoreDB()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_exists = await db.user_exists(message.from_user.id)
        
        await message.answer(
            f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'–î–∞' if user_exists else '–ù–µ—Ç'}"
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:\n{str(e)}"
        )

@router.message(F.text == "üèÜ –¢–µ—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def test_achievement(message: Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    try:
        from database.firestore_db import FirestoreDB
        from database.gamification_db import GamificationDB
        
        db = FirestoreDB()
        gamification_db = GamificationDB(db.db)
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        success = await gamification_db.unlock_achievement(
            message.from_user.id,
            'first_habit'
        )

        if success:
            await message.answer(
                "üéâ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '–ü–µ—Ä–≤—ã–π —à–∞–≥'!"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")
            
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n{str(e)}"
        )

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        from database.firestore_db import FirestoreDB
        from database.gamification_db import GamificationDB
        
        db = FirestoreDB()
        user_exists = await db.user_exists(message.from_user.id)
        
        if not user_exists:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                'username': message.from_user.username,
                'full_name': message.from_user.full_name,
                'achievements_count': 0
            }
            await db.create_user(message.from_user.id, user_data)
            await message.answer("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å!")
        
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        from handlers.profile import show_user_profile
        await show_user_profile(message.from_user.id, message.answer)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è:\n"
            f"–¢–∏–ø: {type(e).__name__}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}"
        )

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    
    print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())