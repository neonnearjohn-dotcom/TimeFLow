"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–æ–≤ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.firestore_db import FirestoreDB
from database.assistant_profile_db import AssistantProfileDB
from utils.plan_generator import generate_plan
from keyboards.assistant_plan import (
    get_plan_preview_keyboard,
    get_plan_saved_keyboard,
    get_plan_generate_keyboard,
    get_plan_management_keyboard
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = FirestoreDB()
profile_db = AssistantProfileDB(db.db)


class PlanPreviewStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–µ–≤—å—é –ø–ª–∞–Ω–∞"""
    viewing = State()


@router.message(F.text == "/plan")
async def cmd_plan(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞"""
    telegram_id = message.from_user.id
    
    try:
        profile = await profile_db.get_profile(telegram_id)
        
        if not profile or not profile.plan:
            await message.answer(
                "<b>üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–∞</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan_generate –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–Ω–∏ –ø–ª–∞–Ω–∞
        plan = profile.plan
        await show_plan_preview(message, plan, 1, is_view_mode=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "plan:generate")
async def callback_plan_generate(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞"""
    await callback.answer()
    await generate_plan_handler(callback.message, callback.from_user.id, state)


async def generate_plan_handler(message: Message, telegram_id: int, state: FSMContext):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = await profile_db.get_profile(telegram_id)
        
        if not profile:
            await message.answer(
                "<b>‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /onboarding",
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        if not profile.onboarding or not profile.onboarding.completed:
            await message.answer(
                "<b>‚ö†Ô∏è –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /onboarding",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_msg = await message.answer(
            "<b>‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω...</b>",
            parse_mode="HTML"
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
        plan = await generate_plan(
            category=profile.active_category,
            answers=profile.onboarding.answers,
            constraints=profile.constraints.dict() if profile.constraints else {},
            horizon_days=15
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
        await state.update_data(
            generated_plan=plan.dict(),
            current_start_day=1
        )
        await state.set_state(PlanPreviewStates.viewing)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        await show_plan_preview(status_msg, plan, 1)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ handlers/assistant.py –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

@router.callback_query(F.data == "ai_plan_menu")
async def show_plan_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–æ–º"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ë–î —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ assistant_onboarding
    from handlers import assistant_onboarding
    _, profile_db = assistant_onboarding.get_db()
    
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = await profile_db.get_profile(callback.from_user.id)
    has_plan = profile and profile.plan is not None
    
    if has_plan:
        # –ï—Å–ª–∏ –ø–ª–∞–Ω –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        from keyboards.assistant_plan import get_plan_management_keyboard
        
        await callback.message.edit_text(
            "<b>üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–º</b>\n\n"
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_plan_management_keyboard(),
            parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ –ø–ª–∞–Ω–∞ –Ω–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
        from keyboards.assistant_plan import get_plan_generate_keyboard
        
        await callback.message.edit_text(
            "<b>üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏?",
            reply_markup=get_plan_generate_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ handlers/assistant_plan.py

@router.callback_query(F.data == "plan:open_preview")
async def handle_plan_open_preview(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞"""
    telegram_id = callback.from_user.id
    
    try:
        profile = await profile_db.get_profile(telegram_id)
        
        if not profile or not profile.plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await state.update_data(
            viewing_plan=profile.plan.dict(),
            current_start_day=1,
            is_view_mode=True
        )
        await state.set_state(PlanPreviewStates.viewing)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω
        await show_plan_preview(callback.message, profile.plan, 1, is_view_mode=True)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞", show_alert=True)


@router.callback_query(F.data == "plan:back")
async def handle_plan_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    from handlers import assistant
    await assistant.show_assistant_menu(callback)


@router.callback_query(F.data == "plan:generate")
async def handle_plan_generate_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    telegram_id = callback.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞
        profile = await profile_db.get_profile(telegram_id)
        
        if profile and profile.plan:
            # –ï—Å–ª–∏ –ø–ª–∞–Ω —É–∂–µ –µ—Å—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –∑–∞–º–µ–Ω–µ
            await callback.message.edit_text(
                "<b>‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω</b>\n\n"
                "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω?\n"
                "–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π",
                            callback_data="plan:generate_confirm_new"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π",
                            callback_data="plan:view"
                        )
                    ]
                ]),
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ –ø–ª–∞–Ω–∞ –Ω–µ—Ç, —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            from handlers import assistant_onboarding
            await assistant_onboarding.start_ai_onboarding(callback, state)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def show_plan_preview(message: Message, plan, start_day: int, is_view_mode: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –ø–ª–∞–Ω–∞"""
    text = f"<b>üìÖ {'–í–∞—à –ø–ª–∞–Ω' if is_view_mode else '–ü—Ä–µ–≤—å—é –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞'}</b>\n"
    text += f"–ì–æ—Ä–∏–∑–æ–Ω—Ç: {plan.horizon_days} –¥–Ω–µ–π\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –¥–Ω—è
    end_day = min(start_day + 2, plan.horizon_days)
    
    for day_num in range(start_day, end_day + 1):
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –¥–Ω—è
        day_tasks = [task for task in plan.days if task.day_number == day_num]
        
        if day_tasks:
            text += f"<b>–î–µ–Ω—å {day_num}:</b>\n"
            for task in day_tasks:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                time_info = ""
                if task.description and "–í—Ä–µ–º—è:" in task.description:
                    time_info = task.description.replace("–í—Ä–µ–º—è: ", "")
                
                text += f"‚Ä¢ {time_info} - {task.title} ({task.duration_minutes} –º–∏–Ω)\n"
            text += "\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–∫–ø–æ–∏–Ω—Ç–∞—Ö
    checkpoints_in_range = [
        cp for cp in plan.checkpoints 
        if start_day <= cp.day_number <= end_day
    ]
    
    if checkpoints_in_range:
        text += "<b>üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏:</b>\n"
        for cp in checkpoints_in_range:
            text += f"–î–µ–Ω—å {cp.day_number}: {cp.title}\n"
        text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    text += f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –¥–Ω–∏ {start_day}-{end_day} –∏–∑ {plan.horizon_days}</i>"
    
    if is_view_mode:
        # –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_plan_preview_keyboard(start_day, plan.horizon_days)
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        buttons = []
        nav_row = []
        
        if start_day > 1:
            nav_row.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"plan:prev:{start_day}"
                )
            )
        
        if start_day + 2 < plan.horizon_days:
            nav_row.append(
                InlineKeyboardButton(
                    text="–î–∞–ª—å—à–µ ‚ñ∂Ô∏è",
                    callback_data=f"plan:next:{start_day}"
                )
            )
        
        if nav_row:
            buttons.append(nav_row)
        
        buttons.append([
            InlineKeyboardButton(
                text="‚óÄÔ∏è –í –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                callback_data="assistant_menu"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    else:
        keyboard = get_plan_preview_keyboard(start_day, plan.horizon_days)
    
    if hasattr(message, 'edit_text'):
        await message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("plan:prev:"), PlanPreviewStates.viewing)
async def handle_plan_prev(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –ø—Ä–µ–≤—å—é –ø–ª–∞–Ω–∞"""
    current_start = int(callback.data.split(":")[-1])
    new_start = max(1, current_start - 3)
    
    data = await state.get_data()
    is_view_mode = data.get("is_view_mode", False)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if is_view_mode:
        plan_dict = data.get("viewing_plan")
    else:
        plan_dict = data.get("generated_plan")
    
    if not plan_dict:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç Plan
    from models.ai_profile import PlanData
    plan = PlanData(**plan_dict)
    
    await state.update_data(current_start_day=new_start)
    await show_plan_preview(callback.message, plan, new_start, is_view_mode)
    await callback.answer()


@router.callback_query(F.data.startswith("plan:next:"), PlanPreviewStates.viewing)
async def handle_plan_next(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª—å—à–µ' –≤ –ø—Ä–µ–≤—å—é –ø–ª–∞–Ω–∞"""
    current_start = int(callback.data.split(":")[-1])
    new_start = current_start + 3
    
    data = await state.get_data()
    is_view_mode = data.get("is_view_mode", False)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if is_view_mode:
        plan_dict = data.get("viewing_plan")
    else:
        plan_dict = data.get("generated_plan")
    
    if not plan_dict:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç Plan
    from models.ai_profile import PlanData
    plan = PlanData(**plan_dict)
    
    await state.update_data(current_start_day=new_start)
    await show_plan_preview(callback.message, plan, new_start, is_view_mode)
    await callback.answer()


@router.callback_query(F.data == "plan:save", PlanPreviewStates.viewing)
async def handle_plan_save(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        data = await state.get_data()
        plan_dict = data.get("generated_plan")
        
        if not plan_dict:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
        success = await profile_db.save_plan(callback.from_user.id, plan_dict)
        
        if success:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_tasks = len(plan_dict.get("days", []))
            total_checkpoints = len(plan_dict.get("checkpoints", []))
            total_buffer_days = len(plan_dict.get("buffer_days", []))
            
            await callback.message.edit_text(
                f"<b>‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>\n\n"
                f"<b>–°–≤–æ–¥–∫–∞ –ø–æ –ø–ª–∞–Ω—É:</b>\n"
                f"‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç: {plan_dict.get('horizon_days', 15)} –¥–Ω–µ–π\n"
                f"‚Ä¢ –ó–∞–¥–∞—á: {total_tasks}\n"
                f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫: {total_checkpoints}\n"
                f"‚Ä¢ –ë—É—Ñ–µ—Ä–Ω—ã—Ö –¥–Ω–µ–π: {total_buffer_days}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!",
                reply_markup=get_plan_saved_keyboard(),
                parse_mode="HTML"
            )
            
            await state.clear()
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "plan:cancel", PlanPreviewStates.viewing)
async def handle_plan_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    await state.clear()
    
    await callback.message.edit_text(
        "<b>‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–æ–∑–∂–µ.",
        reply_markup=get_plan_generate_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "plan:view")
async def handle_plan_view(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞"""
    telegram_id = callback.from_user.id
    
    try:
        profile = await profile_db.get_profile(telegram_id)
        
        if not profile or not profile.plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await state.update_data(
            viewing_plan=profile.plan.dict(),
            current_start_day=1,
            is_view_mode=True
        )
        await state.set_state(PlanPreviewStates.viewing)
        
        await show_plan_preview(callback.message, profile.plan, 1, is_view_mode=True)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞", show_alert=True)


@router.callback_query(F.data == "plan:regenerate")
async def handle_plan_regenerate(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    await callback.answer()
    await callback.message.edit_text(
        "<b>üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω?\n"
        "–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π",
                    callback_data="plan:regenerate_confirm"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="ai_plan_menu"
                )
            ]
        ]),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "plan:regenerate_confirm")
async def handle_plan_regenerate_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–∞–Ω
        success = await profile_db.delete_plan(callback.from_user.id)
        
        if success:
            await callback.message.edit_text(
                "<b>‚úÖ –°—Ç–∞—Ä—ã–π –ø–ª–∞–Ω —É–¥–∞–ª—ë–Ω</b>\n\n"
                "–°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞...",
                parse_mode="HTML"
            )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            import asyncio
            await asyncio.sleep(1)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ
            await state.clear()
            from handlers import assistant_onboarding
            await assistant_onboarding.restart_onboarding_confirmed(callback, state)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "plan:generate_confirm_new")
async def handle_plan_generate_confirm_new(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ"""
    telegram_id = callback.from_user.id
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–∞–Ω
        success = await profile_db.delete_plan(telegram_id)
        
        if success:
            await callback.message.edit_text(
                "<b>‚úÖ –°—Ç–∞—Ä—ã–π –ø–ª–∞–Ω —É–¥–∞–ª—ë–Ω</b>\n\n"
                "–°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞...",
                parse_mode="HTML"
            )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            import asyncio
            await asyncio.sleep(1)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
            from handlers import assistant_onboarding
            await assistant_onboarding.start_ai_onboarding(callback, state)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)