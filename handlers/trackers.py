"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–∏–≤—ã—á–µ–∫
"""
from typing import Dict, List
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from datetime import datetime
import logging

from database.firestore_db import FirestoreDB
from database.tracker_db import TrackerDB
from database.gamification_db import GamificationDB
from keyboards.tracker import (
    get_tracker_menu_keyboard, get_habit_type_keyboard, get_habits_list_keyboard,
    get_habit_detail_keyboard, get_bad_habit_detail_keyboard, get_preset_habits_keyboard,
    get_frequency_keyboard, get_confirmation_keyboard, get_cancel_keyboard
)
from keyboards.main_menu import get_main_menu_keyboard
from states.tracker import HabitCreationStates, BadHabitStates
from utils.messages import ERROR_MESSAGES
from utils.achievements import POINTS_TABLE
from handlers.profile import show_new_achievements

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = FirestoreDB()
tracker_db = TrackerDB(db.db)
gamification_db = GamificationDB(db.db)

# –ü—Ä–µ—Å–µ—Ç—ã –ø—Ä–∏–≤—ã—á–µ–∫
PRESET_HABITS = {
    'water': {'name': '–ü–∏—Ç—å –≤–æ–¥—É', 'description': '–í—ã–ø–∏–≤–∞—Ç—å 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã –≤ –¥–µ–Ω—å', 'emoji': '‚ñ∏'},
    'exercise': {'name': '–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞', 'description': '15 –º–∏–Ω—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ', 'emoji': '‚ñ∏'},
    'reading': {'name': '–ß—Ç–µ–Ω–∏–µ', 'description': '–ß–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å', 'emoji': '‚ñ∏'},
    'meditation': {'name': '–ú–µ–¥–∏—Ç–∞—Ü–∏—è', 'description': '10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏', 'emoji': '‚ñ∏'},
    'early_rise': {'name': '–†–∞–Ω–Ω–∏–π –ø–æ–¥—ä–µ–º', 'description': '–í—Å—Ç–∞–≤–∞—Ç—å –≤ 6:00 —É—Ç—Ä–∞', 'emoji': '‚ñ∏'},
    'healthy_food': {'name': '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', 'description': '–ï—Å—Ç—å –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', 'emoji': '‚ñ∏'},
    'walk': {'name': '–ü—Ä–æ–≥—É–ª–∫–∞', 'description': '10 000 —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å', 'emoji': '‚ñ∏'},
    'journal': {'name': '–î–Ω–µ–≤–Ω–∏–∫', 'description': '–í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º', 'emoji': '‚ñ∏'},
    'planning': {'name': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è', 'description': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å', 'emoji': '‚ñ∏'},
    'sleep': {'name': '–†–µ–∂–∏–º —Å–Ω–∞', 'description': '–õ–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å –¥–æ 23:00', 'emoji': '‚ñ∏'}
}

async def get_user_habits(self, user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        habits_ref = self.db.collection('users').document(str(user_id)) \
                           .collection('habits')
        
        # bugfix: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ firestore
        query = habits_ref.where('is_active', '==', True)
        habits_docs = await query.get()
        
        habits = []
        today = datetime.utcnow().date()
        
        for doc in habits_docs:
            habit_data = doc.to_dict()
            habit_data['id'] = doc.id
            habit_data['habit_id'] = doc.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
            last_completed = habit_data.get('last_completed')
            if last_completed:
                is_completed_today = last_completed.date() == today
            else:
                is_completed_today = False
            
            habit_data['is_completed_today'] = is_completed_today
            habits.append(habit_data)
        
        return habits
        
    except Exception as e:
        logger.error(f"Error getting habits: {e}")
        return []

async def get_user_bad_habits(self, user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        habits_ref = self.db.collection('users').document(str(user_id)) \
                           .collection('bad_habits')
        
        # bugfix: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ firestore
        query = habits_ref.where('is_active', '==', True)
        habits_docs = await query.get()
        
        habits = []
        
        for doc in habits_docs:
            habit_data = doc.to_dict()
            habit_data['id'] = doc.id
            habit_data['habit_id'] = doc.id
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è
            if habit_data.get('last_reset'):
                last_reset = habit_data['last_reset']
                days_without = (datetime.utcnow() - last_reset).days
            else:
                created_at = habit_data.get('created_at', datetime.utcnow())
                days_without = (datetime.utcnow() - created_at).days
            
            habit_data['days_without'] = days_without
            habits.append(habit_data)
        
        logger.info(f"Found {len(habits)} bad habits for user {user_id}")
        return habits
        
    except Exception as e:
        logger.error(f"Error getting bad habits for user {user_id}: {e}")
        return []

async def get_user_stats(self, user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        stats = {
            'active_habits': 0,
            'total_completed': 0,
            'total_streak_days': 0,
            'best_streaks': {},
            'bad_habits_stats': {}
        }
        
        # bugfix: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        habits = await self.get_user_habits(user_id)
        stats['active_habits'] = len(habits)
        
        for habit in habits:
            stats['total_completed'] += habit.get('total_completed', 0)
            stats['total_streak_days'] += habit.get('current_streak', 0)
            
            if habit.get('best_streak', 0) > 0:
                stats['best_streaks'][habit.get('name', '–ü—Ä–∏–≤—ã—á–∫–∞')] = habit.get('best_streak', 0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        bad_habits = await self.get_user_bad_habits(user_id)
        for habit in bad_habits:
            stats['bad_habits_stats'][habit.get('name', '–ü—Ä–∏–≤—ã—á–∫–∞')] = habit.get('days_without', 0)
        
        return stats
        
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        return {
            'active_habits': 0,
            'total_completed': 0,
            'total_streak_days': 0,
            'best_streaks': {},
            'bad_habits_stats': {}
        }
    
# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –¢–†–ï–ö–ï–†–û–í ===

@router.message(F.text == "üìä –¢—Ä–µ–∫–µ—Ä—ã", StateFilter(default_state))
async def handle_tracker_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¢—Ä–µ–∫–µ—Ä—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await message.answer(
        "<b>üìä –¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫</b>\n\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–æ–ª–µ–∑–Ω—ã–º –ø—Ä–∏–≤—ã—á–∫–∞–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_tracker_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "tracker_menu")
async def show_tracker_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–∫–µ—Ä–∞"""
    await callback.message.edit_text(
        "<b>üìä –¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫</b>\n\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–æ–ª–µ–∑–Ω—ã–º –ø—Ä–∏–≤—ã—á–∫–∞–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_tracker_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# === –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–í–´–ß–ö–ò ===

@router.callback_query(F.data == "add_habit")
async def start_habit_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    await callback.message.edit_text(
        "<b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏</b>\n\n"
        "–ö–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
        reply_markup=get_habit_type_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HabitCreationStates.choosing_habit_type)
    await callback.answer()


@router.callback_query(F.data.startswith("habit_type:"), HabitCreationStates.choosing_habit_type)
async def process_habit_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_type = callback.data.split(":")[1]
    
    if habit_type == "preset":
        await callback.message.edit_text(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞:</b>",
            reply_markup=get_preset_habits_keyboard(),
            parse_mode="HTML"
        )
    elif habit_type == "good":
        await state.update_data(habit_type="good")
        await callback.message.answer(
            "<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –ø—Ä–∏–≤—ã—á–∫–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞</i>",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )
        await callback.message.delete()
        await state.set_state(HabitCreationStates.waiting_for_name)
    elif habit_type == "bad":
        await state.update_data(habit_type="bad")
        await callback.message.answer(
            "<b>–í—Ä–µ–¥–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞</b>\n\n"
            "–û—Ç –∫–∞–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è?\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ö—É—Ä–µ–Ω–∏–µ</i>",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )
        await callback.message.delete()
        await state.set_state(HabitCreationStates.waiting_for_name)
    
    await callback.answer()


@router.callback_query(F.data.startswith("preset:"), HabitCreationStates.choosing_habit_type)
async def process_preset_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞"""
    preset_key = callback.data.split(":")[1]
    preset = PRESET_HABITS.get(preset_key)
    
    if preset:
        await state.update_data(
            habit_type="good",
            name=preset['name'],
            description=preset['description'],
            emoji=preset['emoji']
        )
        
        await callback.message.answer(
            f"<b>–ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
            f"–ü—Ä–∏–≤—ã—á–∫–∞: {preset['emoji']} {preset['name']}\n\n"
            f"–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?",
            reply_markup=get_frequency_keyboard(),
            parse_mode="HTML"
        )
        await callback.message.delete()
        await state.set_state(HabitCreationStates.waiting_for_frequency)
    
    await callback.answer()


@router.message(HabitCreationStates.waiting_for_name)
async def process_habit_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_creation(message, state)
        return
    
    await state.update_data(name=message.text)
    
    await message.answer(
        "<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏</b>\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –¥–µ—Ç–∞–ª–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>15 –º–∏–Ω—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ</i>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É (.) —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HabitCreationStates.waiting_for_description)


@router.message(HabitCreationStates.waiting_for_description)
async def process_habit_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_creation(message, state)
        return
    
    description = message.text if message.text != "." else ""
    await state.update_data(description=description)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏
    data = await state.get_data()
    habit_type = data.get('habit_type', 'good')
    
    if habit_type == 'bad':
        # –î–ª—è –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º
        await complete_bad_habit_creation(message, state)
    else:
        # –î–ª—è –ø–æ–ª–µ–∑–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
        await message.answer(
            "<b>–ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
            "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?",
            reply_markup=get_frequency_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(HabitCreationStates.waiting_for_frequency)


@router.message(HabitCreationStates.waiting_for_frequency)
async def process_habit_frequency(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–≤—ã—á–∫–∏"""
    await state.update_data(frequency=message.text)
    
    await message.answer(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ‚ñ∏ ‚Ä¢ ‚óÜ ‚òÖ\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É (.) –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ ‚ñ∏",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(HabitCreationStates.waiting_for_emoji)


@router.message(HabitCreationStates.waiting_for_emoji)
async def process_habit_emoji(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_creation(message, state)
        return
    
    emoji = message.text if message.text != "." else "‚ñ∏"
    await state.update_data(emoji=emoji)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    user_id = message.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
        habit_data = {
            'name': data.get('name'),
            'description': data.get('description', ''),
            'frequency': data.get('frequency', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'),
            'emoji': emoji,
            'is_bad': False
        }
        
        habit_id = await tracker_db.create_habit(user_id, habit_data)
        
        if habit_id:
            await message.answer(
                f"<b>‚úì –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞</b>\n\n"
                f"{emoji} {data.get('name')}\n"
                f"–ß–∞—Å—Ç–æ—Ç–∞: {data.get('frequency', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ')}\n\n"
                f"–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Ç—Ä–µ–∫–µ—Ä.",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
            new_achievements = await gamification_db.check_and_unlock_achievements(user_id)
            if new_achievements:
                await show_new_achievements(message, new_achievements)
        else:
            await message.answer(ERROR_MESSAGES['database_error'])
        
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
        await message.answer(ERROR_MESSAGES['unknown_error'])
        await state.clear()


async def complete_bad_habit_creation(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    data = await state.get_data()
    user_id = message.from_user.id
    
    try:
        habit_data = {
            'name': data.get('name'),
            'description': data.get('description', ''),
            'emoji': '‚ñ∏',
            'is_bad': True  # bugfix: –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ is_bad
        }
        
        habit_id = await tracker_db.create_bad_habit(user_id, habit_data)
        
        if habit_id:
            await message.answer(
                f"<b>‚úì –ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>\n\n"
                f"‚ñ∏ {data.get('name')}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–Ω–∏ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è.",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
            # bugfix: –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            logger.info(f"Created bad habit {habit_id} for user {user_id}")
        else:
            await message.answer(ERROR_MESSAGES['database_error'])
        
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
        await message.answer(ERROR_MESSAGES['unknown_error'])
        await state.clear()


# === –ü–†–û–°–ú–û–¢–† –ü–†–ò–í–´–ß–ï–ö ===

@router.callback_query(F.data == "my_habits")
async def show_my_habits(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""
    user_id = callback.from_user.id
    
    try:
        habits = await tracker_db.get_user_habits(user_id)
        
        if not habits:
            text = "<b>–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏</b>\n\n"
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.\n\n"
            text += "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å."
        else:
            text = "<b>–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏</b>\n\n"
            for habit in habits:
                emoji = habit.get('emoji', '‚ñ∏')
                name = habit.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                streak = habit.get('current_streak', 0)
                is_completed_today = habit.get('is_completed_today', False)
                
                status = "‚úì" if is_completed_today else "‚óã"
                text += f"{status} {emoji} <b>{name}</b>\n"
                text += f"   –°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_habits_list_keyboard(habits, "good"),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∏–≤—ã—á–µ–∫: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("habit_detail:"))
async def view_habit_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏"""
    user_id = callback.from_user.id
    habit_id = callback.data.split(":")[1]
    
    try:
        habit = await tracker_db.get_habit(user_id, habit_id)
        if not habit:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        emoji = habit.get('emoji', '‚ñ∏')
        name = habit.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = habit.get('description', '')
        frequency = habit.get('frequency', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ')
        streak = habit.get('current_streak', 0)
        best_streak = habit.get('best_streak', 0)
        total_completed = habit.get('total_completed', 0)
        is_completed_today = habit.get('is_completed_today', False)
        
        text = f"{emoji} <b>{name}</b>\n\n"
        if description:
            text += f"<i>{description}</i>\n\n"
        
        text += f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency}\n"
        text += f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n"
        text += f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_streak} –¥–Ω–µ–π\n"
        text += f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_completed} —Ä–∞–∑\n"
        
        if is_completed_today:
            text += "\n‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è"
        
        # bugfix: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è builder
        await callback.message.edit_text(
            text,
            reply_markup=get_habit_detail_keyboard(habit_id, is_completed_today),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()

# === –û–¢–ú–ï–¢–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===

@router.callback_query(F.data.startswith("complete_habit:"))
async def complete_habit(callback: CallbackQuery):
    """–û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    user_id = callback.from_user.id
    habit_id = callback.data.split(":")[1]

    logger.info(f"Completing habit {habit_id} for user {user_id}")
    
    try:
        # –û—Ç–º–µ—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –ë–î
        success, new_streak, best_streak = await tracker_db.complete_habit(user_id, habit_id)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—ã—á–∫–µ
            habit = await tracker_db.get_habit(user_id, habit_id)
            habit_name = habit.get('name', '–ü—Ä–∏–≤—ã—á–∫–∞')
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
            await gamification_db.add_points(
                user_id, 
                POINTS_TABLE['habit_completed'],
                'habit_completed',
                {'habit_id': habit_id, 'habit_name': habit_name}
            )
            
            # –ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å streak
            if new_streak > 1:
                await gamification_db.add_points(
                    user_id,
                    POINTS_TABLE['habit_streak_bonus'],
                    'habit_streak_bonus',
                    {'habit_id': habit_id, 'streak': new_streak}
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"<b>‚úì –ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n"
                f"–ü—Ä–∏–≤—ã—á–∫–∞: {habit_name}\n"
                f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {new_streak} {'–¥–µ–Ω—å' if new_streak == 1 else '–¥–Ω–µ–π'}\n"
                f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_streak} –¥–Ω–µ–π\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å.",
                reply_markup=get_habit_detail_keyboard(habit_id, True),
                parse_mode="HTML"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new_achievements = await gamification_db.check_and_unlock_achievements(user_id)
            if new_achievements:
                await show_new_achievements(callback.message, new_achievements)
            
            await callback.answer("–û—Ç–º–µ—á–µ–Ω–æ")
        else:
            await callback.answer("–£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)


# === –í–†–ï–î–ù–´–ï –ü–†–ò–í–´–ß–ö–ò ===

@router.callback_query(F.data == "bad_habits")
async def show_bad_habits_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""
    user_id = callback.from_user.id
    
    try:
        habits = await tracker_db.get_user_bad_habits(user_id)
        
        if not habits:
            text = "<b>–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫</b>\n\n"
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n\n"
            text += "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è."
        else:
            text = "<b>–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫</b>\n\n"
            for habit in habits:
                emoji = habit.get('emoji', '‚ñ∏')
                name = habit.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                days = habit.get('days_without', 0)
                best = habit.get('best_streak', 0)
                
                text += f"{emoji} <b>{name}</b>\n"
                text += f"–ë–µ–∑ —Å—Ä—ã–≤–æ–≤: {days} –¥–Ω–µ–π\n"
                text += f"–†–µ–∫–æ—Ä–¥: {best} –¥–Ω–µ–π\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_habits_list_keyboard(habits, "bad"),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("bad_habit_detail:"))
async def view_bad_habit_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    user_id = callback.from_user.id
    habit_id = callback.data.split(":")[1]
    
    try:
        habit = await tracker_db.get_bad_habit(user_id, habit_id)
        if not habit:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        emoji = habit.get('emoji', '‚ñ∏')
        name = habit.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = habit.get('description', '')
        days = habit.get('days_without', 0)
        best = habit.get('best_streak', 0)
        resets = habit.get('total_resets', 0)
        
        text = f"{emoji} <b>{name}</b>\n\n"
        if description:
            text += f"<i>{description}</i>\n\n"
        
        text += f"<b>–î–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤: {days}</b>\n"
        text += f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best} –¥–Ω–µ–π\n"
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä—ã–≤–æ–≤: {resets}\n"
        
        # –°–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if days > 0:
            if days < 7:
                text += "\n–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ."
            elif days < 30:
                text += "\n–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –î–µ—Ä–∂–∏—Ç–µ—Å—å."
            elif days < 90:
                text += "\n–í–ø–µ—á–∞—Ç–ª—è—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
            else:
                text += "\n–í—ã–¥–∞—é—â–µ–µ—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ."
        
        await callback.message.edit_text(
            text,
            reply_markup=get_bad_habit_detail_keyboard(habit_id),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("reset_bad_habit:"))
async def confirm_reset_bad_habit(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
    habit_id = callback.data.split(":")[1]
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", 
            callback_data=f"confirm_reset:{habit_id}"
        ),
        InlineKeyboardButton(
            text="–û—Ç–º–µ–Ω–∞", 
            callback_data=f"bad_habit_detail:{habit_id}"
        )
    )
    
    await callback.message.edit_text(
        "<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫?\n"
        "–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_reset:"))
async def reset_bad_habit(callback: CallbackQuery):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    user_id = callback.from_user.id
    habit_id = callback.data.split(":")[1]
    
    try:
        success = await tracker_db.reset_bad_habit(user_id, habit_id)
        
        if success:
            await callback.message.edit_text(
                "<b>–°—á–µ—Ç—á–∏–∫ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω</b>\n\n"
                "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å. –ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_tracker_menu_keyboard(),
                parse_mode="HTML"
            )
            await callback.answer("–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω")
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)


# === –ò–°–¢–û–†–ò–Ø –ü–†–ò–í–´–ß–ö–ò ===

@router.callback_query(F.data.startswith("habit_history:"))
async def show_habit_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    user_id = callback.from_user.id
    habit_id = callback.data.split(":")[1]
    
    try:
        habit = await tracker_db.get_habit(user_id, habit_id)
        if not habit:
            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        history = await tracker_db.get_habit_history(user_id, habit_id, limit=10)
        
        text = f"<b>–ò—Å—Ç–æ—Ä–∏—è: {habit.get('name', '–ü—Ä–∏–≤—ã—á–∫–∞')}</b>\n\n"
        
        if not history:
            text += "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        else:
            text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏:\n\n"
            for record in history:
                date = record.get('completed_at', datetime.utcnow())
                text += f"‚Ä¢ {date.strftime('%d.%m.%Y')}\n"
        
        # bugfix: —Å–æ–∑–¥–∞–µ–º builder –ü–ï–†–ï–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚óÄ –ù–∞–∑–∞–¥", 
                callback_data=f"habit_detail:{habit_id}"
            )
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()


# === –£–î–ê–õ–ï–ù–ò–ï –ü–†–ò–í–´–ß–ö–ò ===

@router.callback_query(F.data.startswith("delete_habit:") | F.data.startswith("delete_bad_habit:"))
async def confirm_delete_habit(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    parts = callback.data.split(":")
    habit_type = "bad" if "bad" in parts[0] else "good"
    habit_id = parts[1]
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–î–∞, —É–¥–∞–ª–∏—Ç—å", 
            callback_data=f"confirm_delete:{habit_type}:{habit_id}"
        ),
        InlineKeyboardButton(
            text="–û—Ç–º–µ–Ω–∞", 
            callback_data=f"{'bad_' if habit_type == 'bad' else ''}habit_detail:{habit_id}"
        )
    )
    
    await callback.message.edit_text(
        "<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?\n"
        "–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete:"))
async def delete_habit(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É"""
    user_id = callback.from_user.id
    parts = callback.data.split(":")
    habit_type = parts[1]
    habit_id = parts[2]
    
    try:
        if habit_type == "bad":
            success = await tracker_db.delete_bad_habit(user_id, habit_id)
        else:
            success = await tracker_db.delete_habit(user_id, habit_id)
        
        if success:
            await callback.message.edit_text(
                "–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=get_tracker_menu_keyboard(),
                parse_mode="HTML"
            )
            await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)


# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

@router.callback_query(F.data == "tracker_stats")
async def show_tracker_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–∫–µ—Ä–∞"""
    user_id = callback.from_user.id
    
    try:
        stats = await tracker_db.get_user_stats(user_id)
        
        # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ None
        if not stats:
            stats = {
                'active_habits': 0,
                'total_completed': 0,
                'total_streak_days': 0,
                'best_streaks': {},
                'bad_habits_stats': {}
            }
        
        text = f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞</b>\n\n"
        text += f"<b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: {stats.get('active_habits', 0)}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('total_completed', 0)}\n"
        text += f"‚Ä¢ –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats.get('total_streak_days', 0)} –¥–Ω–µ–π\n\n"
        
        # –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        best_streaks = stats.get('best_streaks', {})
        if best_streaks:
            text += "<b>–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
            for habit_name, streak in best_streaks.items():
                text += f"‚Ä¢ {habit_name}: {streak} –¥–Ω–µ–π\n"
            text += "\n"
        
        # –í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        bad_habits_stats = stats.get('bad_habits_stats', {})
        if bad_habits_stats:
            text += "<b>–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫:</b>\n"
            for habit_name, days in bad_habits_stats.items():
                text += f"‚Ä¢ {habit_name}: {days} –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_tracker_menu_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
    
    await callback.answer()


# === –ü–û–ú–û–©–¨ ===

@router.callback_query(F.data == "tracker_help")
async def show_tracker_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ç—Ä–µ–∫–µ—Ä—É"""
    text = """<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫</b>

<b>–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:</b>
‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–µ—Ä–∏–µ–π –¥–Ω–µ–π (streak)
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –æ—á–∫–∏ –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å

<b>–í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–Ω–∏ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è
‚Ä¢ –ü—Ä–∏ —Å—Ä—ã–≤–µ —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω—É–ª—è–µ—Ç—Å—è
‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å 1-3 –ø—Ä–∏–≤—ã—á–µ–∫
‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–∞–∑—É"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_tracker_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def cancel_creation(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
    await state.clear()
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_keyboard()
    )


@router.callback_query(F.data == "cancel_habit_creation")
async def cancel_creation_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (callback –≤–µ—Ä—Å–∏—è)"""
    await state.clear()
    await callback.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_tracker_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.message.delete()
    await callback.answer()


# –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder