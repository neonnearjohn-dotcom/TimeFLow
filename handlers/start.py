"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
import logging
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from database.firestore_db import FirestoreDB
from keyboards.main_menu import get_main_menu_keyboard, get_skip_keyboard
from states.onboarding import OnboardingStates
from utils.messages import (
    WELCOME_NEW_USER,
    WELCOME_EXISTING_USER,
    ONBOARDING_QUESTIONS,
    ONBOARDING_COMPLETE,
    ERROR_MESSAGES,
)


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = FirestoreDB()


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/onboarding - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å –ò–ò

<b>üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>

üìä <b>–¢—Ä–µ–∫–µ—Ä—ã</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫
- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
- –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º

‚è± <b>–§–æ–∫—É—Å</b> - —Ç–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ
- –§–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º–µ—Ä—ã
- –§–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏ –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏

‚úÖ <b>–ß–µ–∫-–ª–∏—Å—Ç</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
- –ú–∞—Ç—Ä–∏—Ü–∞ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞
- –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

üí¨ <b>–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</b> - –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
- –ë—ã—Å—Ç—Ä—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á
- –°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ò–ò

üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã
- –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å

<b>üí° –°–æ–≤–µ—Ç:</b> 
–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ /onboarding - –ò–ò –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–∏ –∏ —Å–æ–∑–¥–∞—Å—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!

<b>üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ @your_support_username
"""

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data="ai_assistant_start")],
            [
                InlineKeyboardButton(text="üìä –ú–æ–∏ —Ç—Ä–µ–∫–µ—Ä—ã", callback_data="trackers"),
                InlineKeyboardButton(text="‚è± –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è", callback_data="focus"),
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )

    await message.answer(help_text, reply_markup=keyboard, parse_mode="HTML")


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ:
    - –ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    - –ï—Å–ª–∏ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    user_id = message.from_user.id
    user_name = message.from_user.full_name

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user_exists = await db.user_exists(user_id)

        if user_exists:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer(
                WELCOME_EXISTING_USER, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown"
            )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
            user_data = {
                "username": message.from_user.username,
                "full_name": user_name,
                "onboarding_completed": False,
                "points_balance": 0,
                "total_points_earned": 0,
                "achievements_count": 0,
            }

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            success = await db.create_user(user_id, user_data)

            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                await message.answer(WELCOME_NEW_USER)
                await message.answer(
                    ONBOARDING_QUESTIONS["goal"],
                    reply_markup=get_skip_keyboard(),
                    parse_mode="Markdown",
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                await state.set_state(OnboardingStates.waiting_for_goal)
            else:
                await message.answer(ERROR_MESSAGES["database_error"])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(ERROR_MESSAGES["unknown_error"])


@router.message(OnboardingStates.waiting_for_goal)
async def process_goal_answer(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≥–ª–∞–≤–Ω–æ–π —Ü–µ–ª–∏
    """
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    if message.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(goal=message.text)
    else:
        await state.update_data(goal="–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(
        ONBOARDING_QUESTIONS["habits"], reply_markup=get_skip_keyboard(), parse_mode="Markdown"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(OnboardingStates.waiting_for_habits)


@router.message(OnboardingStates.waiting_for_habits)
async def process_habits_answer(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
    """
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if message.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(habits=message.text)
    else:
        await state.update_data(habits="–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(
        ONBOARDING_QUESTIONS["time_problems"],
        reply_markup=get_skip_keyboard(),
        parse_mode="Markdown",
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(OnboardingStates.waiting_for_time_problems)


@router.message(OnboardingStates.waiting_for_time_problems)
async def process_time_problems_answer(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
    """
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
    if message.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(time_problems=message.text)
    else:
        await state.update_data(time_problems="–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        answers = {
            "goal": user_data.get("goal", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "habits": user_data.get("habits", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "time_problems": user_data.get("time_problems", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = await db.save_onboarding_answers(user_id, answers)

        if success:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer(
                ONBOARDING_COMPLETE, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown"
            )
        else:
            await message.answer(ERROR_MESSAGES["database_error"])

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(ERROR_MESSAGES["unknown_error"])
        await state.clear()
