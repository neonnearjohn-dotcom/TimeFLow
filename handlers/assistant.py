"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from datetime import datetime, timezone
import logging
import asyncio

from database.firestore_db import FirestoreDB
from database.assistant_db import AssistantDB
from database.gamification_db import GamificationDB
from keyboards.assistant import (
    get_assistant_menu_keyboard,
    get_scenarios_keyboard,
    get_exit_keyboard,
    get_back_to_scenarios_keyboard,
    get_chat_mode_keyboard
)
from keyboards.main_menu import get_main_menu_keyboard
from states.assistant import AssistantStates
from utils.openai_api import OpenAIAssistant
from utils.messages import ERROR_MESSAGES
from utils.achievements import POINTS_TABLE

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
db = FirestoreDB()
assistant_db = AssistantDB(db.db)
gamification_db = GamificationDB(db.db)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä OpenAI Assistant
try:
    from utils.openai_api import assistant
    openai_assistant = assistant
except ImportError:
    openai_assistant = OpenAIAssistant()

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ASSISTANT_MESSAGES = {
    'welcome': """
<b>üí¨ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
- üéØ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
- ‚ö° –ë—ã—Å—Ç—Ä–æ —Ä–µ—à–∏—Ç—å —Ç–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
- üí≠ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
""",
    
    'chat_mode': """
<b>üí¨ –†–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è</b>

–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã! –Ø –ø–æ–º–æ–≥—É —Å:
- üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
- üéØ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —Ü–µ–ª–µ–π  
- üå± –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–≤—ã—á–µ–∫
- üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
- üß† –ê–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–±–ª–µ–º –∏ –ø–æ–∏—Å–∫–æ–º —Ä–µ—à–µ–Ω–∏–π

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!
""",
    
    'thinking': "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...",
    
    'error_api': """
–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
""",
    
    'demo_mode': """
<b>–î–µ–º–æ-—Ä–µ–∂–∏–º</b>

–°–µ–π—á–∞—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.

–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ò–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á OpenAI
2. –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Ñ–∞–π–ª .env
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞

–ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏.
"""
}

# –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
DEMO_RESPONSES = {
    'plan_day': """
<b>–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å</b>

–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–¥–∫–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:

<b>–£—Ç—Ä–æ (7:00-12:00)</b>
‚Ä¢ –£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞ –∏ –∑–∞–≤—Ç—Ä–∞–∫
‚Ä¢ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –Ω–∞ –≤–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É (90 –º–∏–Ω)
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤

<b>–î–µ–Ω—å (12:00-18:00)</b>
‚Ä¢ –û–±–µ–¥ –∏ –æ—Ç–¥—ã—Ö
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ç–µ–∫—É—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ –≤—Å—Ç—Ä–µ—á–∏

<b>–í–µ—á–µ—Ä (18:00-22:00)</b>
‚Ä¢ –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
‚Ä¢ –õ–∏—á–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏.
""",
    
    'motivation': """
<b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è</b>

–ö–∞–∂–¥—ã–π —à–∞–≥ –≤–ø–µ—Ä–µ–¥ ‚Äî —ç—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å. –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏, —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å —Å–æ–±–æ–π –≤—á–µ—Ä–∞—à–Ω–∏–º.

–í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
‚Ä¢ –°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Ä–∞–∑–≤–∏—Ç–∏—é
‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ—Å—Ç–∏

–ü–æ–º–Ω–∏—Ç–µ: —É—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å.

–ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–≥–æ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
""",
    
    'analyze_failure': """
<b>–ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏</b>

–°—Ä—ã–≤—ã ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –ø—É—Ç–∏. –í–∞–∂–Ω–æ –Ω–µ —Ç–æ, —á—Ç–æ –≤—ã –æ—Å—Ç—É–ø–∏–ª–∏—Å—å, –∞ —Ç–æ, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –°–ª–∏—à–∫–æ–º –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ —Ü–µ–ª–∏
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
2. –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω
3. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ
4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å

–ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ.
""",
    
    'habit_advice': """
<b>–°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º</b>

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫:

1. <b>–ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª–æ–≥–æ</b>
   –õ—É—á—à–µ 5 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á–µ–º —á–∞—Å —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é

2. <b>–ü—Ä–∏–≤—è–∑—ã–≤–∞–π—Ç–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º</b>
   –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –ø–æ—Å–ª–µ —É–∂–µ —É—Å—Ç–æ—è–≤—à–µ–π—Å—è

3. <b>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã</b>
   –í—Ä–µ–º—è, –º–µ—Å—Ç–æ, –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

4. <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å</b>
   –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç

5. <b>–ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã</b>
   21-66 –¥–Ω–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è

–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∞ –Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
"""
}


# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ê–°–°–ò–°–¢–ï–ù–¢–ê ===



@router.message(F.text == "üí¨ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", StateFilter(default_state))
async def handle_assistant_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
    from database.firestore_db import FirestoreDB
    from database.assistant_profile_db import AssistantProfileDB
    
    db = FirestoreDB()
    profile_db = AssistantProfileDB(db.db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = await profile_db.get_profile(message.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if not profile or not profile.onboarding.completed:
        welcome_text = (
            "<b>üí¨ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            "- üéØ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π\n"
            "- ‚ö° –ë—ã—Å—Ç—Ä–æ —Ä–µ—à–∏—Ç—å —Ç–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏\n"
            "- üí≠ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "- üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
        )
    else:
        welcome_text = (
            "<b>üí¨ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            "- üéØ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º –ø–ª–∞–Ω–æ–º\n"
            "- ‚ö° –ë—ã—Å—Ç—Ä–æ —Ä–µ—à–∏—Ç—å —Ç–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏\n"
            "- üí≠ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "- üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
        )
    
    await message.answer(
        welcome_text,
        reply_markup=get_assistant_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "assistant_menu")
async def show_assistant_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –ø–ª–∞–Ω–∞"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∞
    from handlers import assistant_onboarding
    
    # –ü–æ–ª—É—á–∞–µ–º –ë–î —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ assistant_onboarding
    _, profile_db = assistant_onboarding.get_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_plan = False
    if profile_db:
        profile = await profile_db.get_profile(callback.from_user.id)
        has_plan = profile and profile.plan is not None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á
    if not openai_assistant.has_api_key():
        text = ASSISTANT_MESSAGES['demo_mode'] + "\n\n" + ASSISTANT_MESSAGES['welcome']
    else:
        text = ASSISTANT_MESSAGES['welcome']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –º–æ–π –ø–ª–∞–Ω"
    if has_plan:
        builder.row(
            InlineKeyboardButton(
                text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –ø–ª–∞–Ω",
                callback_data="ai_show_plan"
            )
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        builder.row(
            InlineKeyboardButton(
                text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω",
                callback_data="ai_create_new_plan"
            )
        )
    else:
        # –ï—Å–ª–∏ –ø–ª–∞–Ω–∞ –Ω–µ—Ç - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        builder.row(
            InlineKeyboardButton(
                text="üéØ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω",
                callback_data="ai_assistant_start"
            )
        )
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    builder.row(
        InlineKeyboardButton(
            text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏",
            callback_data="quick_scenarios"
        )
    )
    
    # –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç
    builder.row(
        InlineKeyboardButton(
            text="üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç",
            callback_data="free_chat"
        )
    )
    
    # –ò—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    builder.row(
        InlineKeyboardButton(
            text="üìú –ò—Å—Ç–æ—Ä–∏—è",
            callback_data="chat_history"
        ),
        InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="assistant_stats"
        )
    )
    
    # –í—ã—Ö–æ–¥
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            callback_data="exit_assistant"
        )
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


# === –í–´–ë–û–† –°–¶–ï–ù–ê–†–ò–Ø ===

@router.callback_query(F.data == "choose_scenario")
async def show_scenarios(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    await callback.message.edit_text(
        "<b>–ì–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–º –≤–∞–º –ø–æ–º–æ—á—å:",
        reply_markup=get_scenarios_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("scenario:"))
async def process_scenario(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
    scenario = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await callback.message.edit_text(
        ASSISTANT_MESSAGES['thinking'],
        parse_mode="HTML"
    )
    
    try:
        # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç—ã
        if not openai_assistant.has_api_key():
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            response_text = DEMO_RESPONSES.get(scenario, "–î–µ–º–æ-–æ—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            history = await assistant_db.get_chat_history(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = await openai_assistant.send_message(
                message="",  # –î–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
                context=history,
                scenario=scenario
            )
            
            if response['success']:
                response_text = response['content']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                await assistant_db.add_message(
                    user_id,
                    "assistant",
                    response_text,
                    scenario=scenario
                )
                
                # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
                last_use = await assistant_db.get_last_use_date(user_id)
                today = datetime.now(timezone.utc).date()
                
                if not last_use or last_use.date() < today:
                    await gamification_db.add_points(
                        user_id,
                        5,
                        'assistant_daily_use',
                        {'scenario': scenario}
                    )
                    await assistant_db.update_last_use_date(user_id)
            else:
                response_text = ASSISTANT_MESSAGES['error_api']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await callback.message.edit_text(
            response_text,
            reply_markup=get_back_to_scenarios_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await callback.message.edit_text(
            ASSISTANT_MESSAGES['error_api'],
            reply_markup=get_back_to_scenarios_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()


# === –°–í–û–ë–û–î–ù–´–ô –ß–ê–¢ ===

@router.callback_query(F.data == "free_chat")
async def start_free_chat(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        ASSISTANT_MESSAGES['chat_mode'],
        reply_markup=get_chat_mode_keyboard(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        parse_mode="HTML"
    )
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await callback.message.answer(
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_exit_keyboard()  # –¢–µ–ø–µ—Ä—å ReplyKeyboardMarkup –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
    await state.set_state(AssistantStates.chat_mode)
    
    await callback.answer()

@router.callback_query(F.data == "ai_create_plan")
async def redirect_to_onboarding(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω'"""
    from handlers import assistant_onboarding
    await assistant_onboarding.start_ai_onboarding(callback, state)


@router.callback_query(F.data == "ai_create_new_plan")
async def handle_create_new_plan(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ)"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    from handlers import assistant_onboarding
    _, profile_db = assistant_onboarding.get_db()
    
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞
    profile = await profile_db.get_profile(callback.from_user.id)
    
    if profile and profile.plan:
        # –ï—Å–ª–∏ –ø–ª–∞–Ω –µ—Å—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            "<b>‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞</b>\n\n"
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω.\n"
            "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç–µ–∫—É—â–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω.\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π",
                        callback_data="ai_confirm_new_plan"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π",
                        callback_data="assistant_menu"
                    )
                ]
            ]),
            parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ –ø–ª–∞–Ω–∞ –Ω–µ—Ç, —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        from handlers import assistant_onboarding
        await assistant_onboarding.start_ai_onboarding(callback, state)
    
    await callback.answer()


@router.callback_query(F.data == "ai_confirm_new_plan")
async def handle_confirm_new_plan(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    from handlers import assistant_onboarding
    _, profile_db = assistant_onboarding.get_db()
    
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–∞–Ω
        success = await profile_db.delete_plan(callback.from_user.id)
        
        if success:
            await callback.message.edit_text(
                "<b>‚úÖ –°—Ç–∞—Ä—ã–π –ø–ª–∞–Ω —É–¥–∞–ª—ë–Ω</b>\n\n"
                "–°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞...",
                parse_mode="HTML"
            )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            import asyncio
            await asyncio.sleep(1)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ
            await state.clear()
            from handlers import assistant_onboarding
            await assistant_onboarding.restart_onboarding_confirmed(callback, state)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(AssistantStates.chat_mode)
async def process_chat_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞"""
    user_id = message.from_user.id
    user_message = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã—Ö–æ–¥–∞
    if user_message.lower() in ['–≤—ã—Ö–æ–¥', '—Å—Ç–æ–ø', '–æ—Ç–º–µ–Ω–∞', '/stop']:
        await state.clear()
        await message.answer(
            "–†–µ–∂–∏–º —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    typing_msg = await message.answer(ASSISTANT_MESSAGES['thinking'])
    
    try:
        # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ - –¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        if not openai_assistant.has_api_key():
            await asyncio.sleep(1)
            response_text = (
                "–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏.\n\n"
                "–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á OpenAI."
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await assistant_db.add_message(user_id, "user", user_message)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = await assistant_db.get_chat_history(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = await openai_assistant.send_message(
                message=user_message,
                context=history
            )
            
            if response['success']:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'response' –≤–º–µ—Å—Ç–æ 'content' (–∏–ª–∏ –æ–±–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                response_text = response.get('response') or response.get('content', '')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                await assistant_db.add_message(
                    user_id,
                    "assistant",
                    response_text
                )
            else:
                response_text = ASSISTANT_MESSAGES['error_api']
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await typing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(
            response_text,
            reply_markup=get_chat_mode_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        await typing_msg.delete()
        await message.answer(
            ASSISTANT_MESSAGES['error_api'],
            reply_markup=get_chat_mode_keyboard(),
            parse_mode="HTML"
        )


# === –ò–°–¢–û–†–ò–Ø –ß–ê–¢–ê ===

@router.callback_query(F.data == "chat_history")
async def show_chat_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = await assistant_db.get_chat_history(user_id, limit=10)
        
        if not history:
            text = "<b>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞</b>\n\n"
            text += "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."
        else:
            text = "<b>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞</b>\n\n"
            text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
            
            for msg in history[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                role = "–í—ã" if msg['role'] == 'user' else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                content = msg['content'][:100] + "..." if len(msg['content']) > 100 else msg['content']
                text += f"<b>{role}:</b> {content}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_assistant_menu_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()


# === –û–ß–ò–°–¢–ö–ê –ò–°–¢–û–†–ò–ò ===

@router.callback_query(F.data == "clear_history")
async def confirm_clear_history(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    await callback.message.edit_text(
        "<b>–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_history"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="assistant_menu")
            ]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_clear_history")
async def clear_history(callback: CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    user_id = callback.from_user.id
    
    try:
        success = await assistant_db.clear_history(user_id)
        
        if success:
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞", show_alert=True)
            await callback.message.edit_text(
                ASSISTANT_MESSAGES['welcome'],
                reply_markup=get_assistant_menu_keyboard(),
                parse_mode="HTML"
            )
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)


# === –í–´–•–û–î –ò–ó –ß–ê–¢–ê ===

@router.callback_query(F.data == "exit_chat", StateFilter(AssistantStates.chat_mode))
async def exit_chat_mode(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞"""
    await state.clear()
    
    await callback.message.edit_text(
        "–†–µ–∂–∏–º —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n" + ASSISTANT_MESSAGES['welcome'],
        reply_markup=get_assistant_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# === –í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ ===

@router.callback_query(F.data == "exit_assistant")
async def exit_assistant(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")

@router.callback_query(F.data == "ai_assistant_start")
async def start_ai_planning(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ assistant_onboarding
    from handlers import assistant_onboarding
    await assistant_onboarding.start_ai_onboarding(callback, state)


@router.callback_query(F.data == "quick_scenarios")
async def show_quick_scenarios(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    scenarios = [
        ("üìÖ –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å", "scenario_day_plan"),
        ("üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "scenario_motivation"),
        ("üéØ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏", "scenario_goal_setting"),
        ("‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º", "scenario_time_management"),
        ("üßò –ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å", "scenario_stress_relief")
    ]
    
    builder = InlineKeyboardBuilder()
    for text, callback_data in scenarios:
        builder.row(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="assistant_menu"))
    
    await callback.message.edit_text(
        "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()



# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–¶–ï–ù–ê–†–ò–ï–í ===

@router.callback_query(F.data.startswith("scenario_"))
async def handle_scenario(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    scenario_type = callback.data.replace("scenario_", "")
    
    scenarios_responses = {
        "day_plan": (
            "üìÖ <b>–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å</b>\n\n"
            "–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è:\n"
            "1. –ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–π –≤–∞–∂–Ω–æ–π –∑–∞–¥–∞—á–∏\n"
            "2. –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 45-90 –º–∏–Ω—É—Ç\n"
            "3. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞\n"
            "4. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –¥–µ–Ω—å –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ–º –∏—Ç–æ–≥–æ–≤\n\n"
            "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø–æ–º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω?"
        ),
        "motivation": (
            "üí™ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è</b>\n\n"
            "–ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏!\n\n"
            "‚ú® –í—ã —É–∂–µ –ø—Ä–æ–¥–µ–ª–∞–ª–∏ –±–æ–ª—å—à–æ–π –ø—É—Ç—å\n"
            "üéØ –í–∞—à–∏ —É—Å–∏–ª–∏—è –Ω–µ –Ω–∞–ø—Ä–∞—Å–Ω—ã\n"
            "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥\n\n"
            "–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞—Å —Å–µ–π—á–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
        ),
        "goal_setting": (
            "üéØ <b>–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏</b>\n\n"
            "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:\n"
            "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π\n"
            "‚Ä¢ –ò–∑–º–µ—Ä–∏–º–æ–π\n"
            "‚Ä¢ –î–æ—Å—Ç–∏–∂–∏–º–æ–π\n"
            "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ–π\n"
            "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —Ü–µ–ª–∏, –∏ —è –ø–æ–º–æ–≥—É –µ—ë —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å!"
        ),
        "time_management": (
            "‚è∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ —Ç–µ—Ö–Ω–∏–∫–∏:\n"
            "‚Ä¢ –ú–µ—Ç–æ–¥ –ü–æ–º–æ–¥–æ—Ä–æ (25 –º–∏–Ω —Ä–∞–±–æ—Ç—ã + 5 –º–∏–Ω –æ—Ç–¥—ã—Ö)\n"
            "‚Ä¢ –ú–∞—Ç—Ä–∏—Ü–∞ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞ (–≤–∞–∂–Ω–æ–µ/—Å—Ä–æ—á–Ω–æ–µ)\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª–æ 2 –º–∏–Ω—É—Ç (–¥–µ–ª–∞–π—Ç–µ —Å—Ä–∞–∑—É)\n"
            "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ\n\n"
            "–ö–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
        ),
        "stress_relief": (
            "üßò <b>–ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å</b>\n\n"
            "–ë—ã—Å—Ç—Ä—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–Ω—è—Ç—å —Å—Ç—Ä–µ—Å—Å:\n"
            "‚Ä¢ –î—ã—Ö–∞–Ω–∏–µ 4-7-8 (–≤–¥–æ—Ö-–∑–∞–¥–µ—Ä–∂–∫–∞-–≤—ã–¥–æ—Ö)\n"
            "‚Ä¢ 5-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞\n"
            "‚Ä¢ –ó–∞–ø–∏—à–∏—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã\n"
            "‚Ä¢ –†–∞—Å—Ç—è–∂–∫–∞ –∏–ª–∏ –ª–µ–≥–∫–∞—è –∑–∞—Ä—è–¥–∫–∞\n\n"
            "–ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –≤–∞—Å —Å—Ç—Ä–µ—Å—Å —Å–µ–π—á–∞—Å?"
        )
    }
    
    response = scenarios_responses.get(scenario_type, "–°—Ü–µ–Ω–∞—Ä–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üí¨ –û–±—Å—É–¥–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="free_chat"))
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å—Ü–µ–Ω–∞—Ä–∏—è–º", callback_data="quick_scenarios"))
    builder.row(InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="assistant_menu"))
    
    await callback.message.edit_text(
        response,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


# –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton 
from aiogram.utils.keyboard import InlineKeyboardBuilder



