"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
from typing import List
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.state import default_state
from datetime import datetime, timezone
import logging

from database.firestore_db import FirestoreDB
from database.gamification_db import GamificationDB
from keyboards.profile import (
    get_profile_menu_keyboard, get_achievements_keyboard, get_stats_keyboard,
    get_achievement_categories_keyboard, get_back_to_profile_keyboard
)
from keyboards.main_menu import get_main_menu_keyboard
from utils.achievements import ACHIEVEMENTS, get_achievement_message, get_rarity_color
from utils.messages import ERROR_MESSAGES

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = FirestoreDB()
gamification_db = GamificationDB(db.db)


# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ü–†–û–§–ò–õ–Ø ===

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å", StateFilter(default_state))
async def handle_profile_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ—Ñ–∏–ª—å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await show_user_profile(message.from_user.id, message.answer)


@router.callback_query(F.data == "view_profile")
async def handle_profile_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ callback"""
    await show_user_profile(callback.from_user.id, callback.message.edit_text)
    await callback.answer()


@router.callback_query(F.data == "refresh_profile")
async def refresh_profile(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    await show_user_profile(callback.from_user.id, callback.message.edit_text)
    await callback.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!")


async def show_user_profile(user_id: int, answer_method):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_exists = await db.user_exists(user_id)
        if not user_exists:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            await answer_method(
                "üòî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–í—ã–ø–æ–ª–Ω–∏ –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ø—Ä–∏–≤—ã—á–∫—É, —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é –∏–ª–∏ –∑–∞–¥–∞—á—É), —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        profile = await gamification_db.get_user_profile(user_id)
        
        if not profile:
            logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—É—Å—Ç–æ–π")
            await answer_method(
                "üòî –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π.\n\n"
                "–ù–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –∏ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        text = f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += f"üëã {profile.get('full_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}\n"
        if profile.get('username'):
            text += f"üîó @{profile['username']}\n"
        
        created_at = profile.get('created_at')
        if created_at:
            from datetime import datetime, timezone 
            days_with_us = (datetime.now(timezone.utc) - created_at).days
            text += f"üìÖ –° –Ω–∞–º–∏: {days_with_us} –¥–Ω–µ–π\n"
        
        text += "\n"
        
        # –û—á–∫–∏
        balance = profile.get('points_balance', 0)
        total_earned = profile.get('total_points_earned', 0)
        text += f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –æ—á–∫–æ–≤:</b> {balance}\n"
        text += f"üíé <b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {total_earned}\n\n"
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_count = profile.get('achievements_count', 0)
        text += f"üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ:</b> {achievements_count}\n\n"
        
        # –õ—É—á—à–∏–µ streak'–∏
        streaks = profile.get('best_streaks', {})
        text += "<b>üî• –õ—É—á—à–∏–µ —Å–µ—Ä–∏–∏:</b>\n"
        text += f"‚Ä¢ –ü—Ä–∏–≤—ã—á–∫–∏: {streaks.get('habits', 0)} –¥–Ω–µ–π\n"
        text += f"‚Ä¢ –§–æ–∫—É—Å: {streaks.get('focus', 0)} –¥–Ω–µ–π\n"
        text += f"‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç: {streaks.get('checklist', 0)} –¥–Ω–µ–π\n"
        text += f"‚Ä¢ –ë–µ–∑ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: {streaks.get('bad_habits', 0)} –¥–Ω–µ–π\n\n"
        
        # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress = profile.get('total_progress', {})
        text += "<b>üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"
        text += f"‚Ä¢ –ü—Ä–∏–≤—ã—á–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress.get('habits_completed', 0)}\n"
        text += f"‚Ä¢ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏–π: {progress.get('focus_sessions', 0)}\n"
        text += f"‚Ä¢ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress.get('tasks_completed', 0)}\n"
        text += f"‚Ä¢ –ß–∞—Å–æ–≤ –≤ —Ñ–æ–∫—É—Å–µ: {progress.get('focus_hours', 0)}\n\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        recent = profile.get('recent_actions', [])
        if recent:
            text += "<b>üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            for action in recent[:3]:
                text += f"‚Ä¢ {action['name']} (+{action['points']} –æ—á–∫–æ–≤)\n"
        
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        
        await answer_method(
            text,
            reply_markup=get_profile_menu_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}", exc_info=True)
        await answer_method(
            "üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu_keyboard()
        )


# === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===

@router.callback_query(F.data == "view_achievements")
async def show_achievements_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    try:
        achievements = await gamification_db.get_user_achievements(user_id)
        
        text = "üèÜ <b>–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
        
        if not achievements:
            text += "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
            text += "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞—á–∏, —Ä–∞–∑–≤–∏–≤–∞–π –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã! üí™"
        else:
            text += f"–ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(achievements)}\n"
            text += f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(ACHIEVEMENTS)}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ:</b>\n"
            for ach in achievements[:5]:
                emoji = ach.get('emoji', 'üèÖ')
                name = ach.get('name', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')
                rarity = ach.get('rarity', 'common')
                color = get_rarity_color(rarity)
                text += f"{emoji} {color} {name}\n"
            
            if len(achievements) > 5:
                text += f"\n...–∏ –µ—â–µ {len(achievements) - 5} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_achievements_keyboard(bool(achievements)),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data == "all_achievements")
async def show_all_achievements(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    await callback.message.edit_text(
        "üèÜ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_achievement_categories_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("ach_cat:"))
async def show_achievements_by_category(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = callback.from_user.id
    category = callback.data.split(":")[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_achievements = await gamification_db.get_user_achievements(user_id)
        user_ach_ids = [ach.get('achievement_id') for ach in user_achievements if 'achievement_id' in ach]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_achievements = []
        for ach_id, ach_data in ACHIEVEMENTS.items():
            condition_type = ach_data['condition']['type']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if category == 'habits' and condition_type == 'habit_streak':
                category_achievements.append((ach_id, ach_data))
            elif category == 'focus' and condition_type in ['focus_sessions', 'focus_hours']:
                category_achievements.append((ach_id, ach_data))
            elif category == 'tasks' and condition_type == 'tasks_completed':
                category_achievements.append((ach_id, ach_data))
            elif category == 'bad_habits' and condition_type == 'bad_habit_free':
                category_achievements.append((ach_id, ach_data))
            elif category == 'special' and condition_type in ['special', 'first_action']:
                category_achievements.append((ach_id, ach_data))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        category_names = {
            'habits': 'üå± –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫',
            'focus': 'üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞',
            'tasks': 'üìã –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–¥–∞—á',
            'bad_habits': 'üí™ –ü–æ–±–µ–¥–∞ –Ω–∞–¥ –≤—Ä–µ–¥–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
            'special': '‚≠ê –û—Å–æ–±—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
        }
        
        text = f"<b>{category_names.get(category, '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')}</b>\n\n"
        
        for ach_id, ach_data in category_achievements:
            emoji = ach_data['emoji']
            name = ach_data['name']
            description = ach_data['description']
            rarity = ach_data['rarity']
            color = get_rarity_color(rarity)
            
            if ach_id in user_ach_ids:
                text += f"‚úÖ {emoji} <b>{name}</b> {color}\n"
            else:
                text += f"üîí {emoji} <s>{name}</s> {color}\n"
            
            text += f"   <i>{description}</i>\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_achievement_categories_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data == "achievements_progress")
async def show_achievements_progress(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º"""
    user_id = callback.from_user.id
    
    try:
        achievements = await gamification_db.get_user_achievements(user_id)
        user_ach_ids = [ach.get('achievement_id') for ach in achievements if 'achievement_id' in ach]
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        rarity_counts = {
            'common': {'total': 0, 'unlocked': 0},
            'rare': {'total': 0, 'unlocked': 0},
            'epic': {'total': 0, 'unlocked': 0},
            'legendary': {'total': 0, 'unlocked': 0}
        }
        
        for ach_id, ach_data in ACHIEVEMENTS.items():
            rarity = ach_data.get('rarity', 'common')
            rarity_counts[rarity]['total'] += 1
            if ach_id in user_ach_ids:
                rarity_counts[rarity]['unlocked'] += 1
        
        text = "üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º</b>\n\n"
        
        total_unlocked = len(user_ach_ids)
        total_available = len(ACHIEVEMENTS)
        progress_percent = (total_unlocked / total_available * 100) if total_available > 0 else 0
        
        text += f"–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {total_unlocked}/{total_available} ({progress_percent:.1f}%)\n"
        text += f"{'‚ñà' * int(progress_percent / 10)}{'‚ñë' * (10 - int(progress_percent / 10))}\n\n"
        
        text += "<b>–ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏:</b>\n"
        for rarity, counts in rarity_counts.items():
            color = get_rarity_color(rarity)
            rarity_names = {
                'common': '–û–±—ã—á–Ω—ã–µ',
                'rare': '–†–µ–¥–∫–∏–µ',
                'epic': '–≠–ø–∏—á–µ—Å–∫–∏–µ',
                'legendary': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ'
            }
            name = rarity_names.get(rarity, rarity)
            unlocked = counts['unlocked']
            total = counts['total']
            text += f"{color} {name}: {unlocked}/{total}\n"
        
        # –ë–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        text += "\n<b>üéØ –ë–ª–∏–∑–∫–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:</b>\n"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        
        await callback.message.edit_text(
            text,
            reply_markup=get_achievements_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()


# === –ò–°–¢–û–†–ò–Ø –û–ß–ö–û–í ===

@router.callback_query(F.data == "points_history")
async def show_points_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤"""
    user_id = callback.from_user.id
    
    try:
        history = await gamification_db.get_points_history(user_id, limit=15)
        balance = await gamification_db.get_points_balance(user_id)
        
        text = f"üí∞ <b>–ò—Å—Ç–æ—Ä–∏—è –æ—á–∫–æ–≤</b>\n\n"
        text += f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –æ—á–∫–æ–≤\n\n"
        
        if not history:
            text += "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n"
            text += "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–∞–π –æ—á–∫–∏! üí™"
        else:
            text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</b>\n"
            
            reason_names = {
                'habit_completed': '‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞',
                'focus_session_complete': 'üéØ –§–æ–∫—É—Å',
                'task_completed': 'üìã –ó–∞–¥–∞—á–∞',
                'achievement_unlocked': 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
                'bad_habit_day': 'üí™ –î–µ–Ω—å –±–µ–∑ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏',
                'habit_streak_bonus': 'üî• –ë–æ–Ω—É—Å –∑–∞ streak'
            }
            
            for record in history:
                reason = record.get('reason', '')
                points = record.get('points', 0)
                timestamp = record.get('timestamp')
                
                action_name = reason_names.get(reason, '–î–µ–π—Å—Ç–≤–∏–µ')
                
                if timestamp:
                    time_str = timestamp.strftime('%d.%m %H:%M')
                    text += f"{time_str} | {action_name} | +{points}\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_to_profile_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—á–∫–æ–≤: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()


# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

@router.callback_query(F.data == "detailed_stats")
async def show_detailed_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    await callback.message.edit_text(
        "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_stats_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "stats_by_module")
async def show_stats_by_module(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥—É–ª—è–º"""
    user_id = callback.from_user.id
    
    try:
        profile = await gamification_db.get_user_profile(user_id)
        progress = profile.get('total_progress', {})
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º</b>\n\n"
        
        # –ü—Ä–∏–≤—ã—á–∫–∏
        text += "üå± <b>–ü—Ä–∏–≤—ã—á–∫–∏:</b>\n"
        text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress.get('habits_completed', 0)} —Ä–∞–∑\n"
        text += f"‚Ä¢ –õ—É—á—à–∏–π streak: {profile.get('best_streaks', {}).get('habits', 0)} –¥–Ω–µ–π\n\n"
        
        # –§–æ–∫—É—Å
        text += "üéØ <b>–§–æ–∫—É—Å:</b>\n"
        text += f"‚Ä¢ –°–µ—Å—Å–∏–π: {progress.get('focus_sessions', 0)}\n"
        text += f"‚Ä¢ –ß–∞—Å–æ–≤ –≤ —Ñ–æ–∫—É—Å–µ: {progress.get('focus_hours', 0)}\n"
        text += f"‚Ä¢ –õ—É—á—à–∏–π streak: {profile.get('best_streaks', {}).get('focus', 0)} –¥–Ω–µ–π\n\n"
        
        # –ß–µ–∫-–ª–∏—Å—Ç
        text += "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç:</b>\n"
        text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {progress.get('tasks_completed', 0)}\n"
        text += f"‚Ä¢ –õ—É—á—à–∏–π streak: {profile.get('best_streaks', {}).get('checklist', 0)} –¥–Ω–µ–π\n\n"
        
        # –í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
        text += "üí™ <b>–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
        text += f"‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {profile.get('best_streaks', {}).get('bad_habits', 0)} –¥–Ω–µ–π\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_stats_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–æ–¥—É–ª—è–º: {e}")
        await callback.answer(ERROR_MESSAGES['unknown_error'], show_alert=True)
    
    await callback.answer()


# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ö–ê–ó–ê –ù–û–í–´–• –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===

async def show_new_achievements(message: Message, achievement_ids: List[str]):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    """
    for ach_id in achievement_ids:
        achievement_text = get_achievement_message(ach_id)
        if achievement_text:
            await message.answer(
                achievement_text,
                parse_mode="HTML"
            )