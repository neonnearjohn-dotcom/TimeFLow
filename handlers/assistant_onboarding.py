"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
"""
import json
import os
from typing import Dict, Any, List, Optional
from datetime import datetime, date, timezone
import logging
import asyncio

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.plan_generator import generate_plan
from handlers.assistant_plan import show_plan_preview
from aiogram.fsm.state import State, StatesGroup

from handlers.assistant_plan import PlanPreviewStates, show_plan_preview

# –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from database.firestore_db import FirestoreDB
from database.assistant_profile_db import AssistantProfileDB
from states.assistant_onboarding import AssistantOnboardingStates
from keyboards.main_menu import get_main_menu_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
logger = logging.getLogger(__name__)

_db: Optional[FirestoreDB] = None
_profile_db: Optional[AssistantProfileDB] = None

def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)"""
    global _db, _profile_db
    if _db is None:
        try:
            _db = FirestoreDB()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ë–î –µ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç
            if _db.db is not None:
                _profile_db = AssistantProfileDB(_db.db)
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Firestore")
                _profile_db = None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            _db = None
            _profile_db = None
    return _db, _profile_db

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON
def load_questions() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        json_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'onboarding_questions.json')
        with open(json_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return {"categories": {}, "constraints_questions": {"general": []}}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
QUESTIONS_DATA = load_questions()                                                   

logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(QUESTIONS_DATA.get('categories', {}))}")
logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(QUESTIONS_DATA.get('categories', {}).keys())}")

@router.message(Command("onboarding"))
async def start_onboarding_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /onboarding"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    profile = await profile_db.get_profile(message.from_user.id)
    
    if profile and profile.onboarding.completed:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="onb_restart_confirmed")],
            [InlineKeyboardButton(text="üìä –ú–æ–π –ø–ª–∞–Ω", callback_data="ai_show_plan")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="assistant_menu")]
        ])
        
        await message.answer(
            "‚úÖ <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å!</b>\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {QUESTIONS_DATA['categories'].get(profile.active_category, {}).get('emoji', '')} "
            f"{QUESTIONS_DATA['categories'].get(profile.active_category, {}).get('title', '')}\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏.\n"
            "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 3-5 –º–∏–Ω—É—Ç.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_category_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(AssistantOnboardingStates.choosing_category)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = FirestoreDB()
profile_db = AssistantProfileDB(db.db)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON
def load_questions() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        json_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'onboarding_questions.json')
        with open(json_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return {"categories": {}, "constraints_questions": {"general": []}}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
QUESTIONS_DATA = load_questions()


# === –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ===



def get_navigation_keyboard(question_index: int, total_questions: int, required: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º (–±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞)"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å)
    if question_index > 0:
        buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="onb_previous_question"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" (–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    if not required:
        buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="onb_skip_current"
            )
        )
    
    if buttons:
        builder.row(*buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="onb_cancel"
        )
    )
    
    return builder.as_markup()


# === –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–û–ö–ê–ó–ê –í–û–ü–†–û–°–û–í ===

async def show_next_question(obj: Any, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    category_questions = data.get("category_questions", [])
    constraint_questions = data.get("constraint_questions", [])
    all_questions = category_questions + constraint_questions
    
    current_index = data.get("current_question_index", 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
    if current_index >= len(all_questions):
        await show_summary(obj, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = all_questions[current_index]
    question_type = question["type"]
    required = question.get("required", True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    text = f"<b>–í–æ–ø—Ä–æ—Å {current_index + 1} –∏–∑ {len(all_questions)}</b>\n\n"
    text += question["text"]
    
    if question.get("placeholder"):
        text += f"\n\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {question['placeholder']}</i>"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
    await state.update_data(
        all_questions=all_questions,
        current_question=question,
        current_question_id=question["id"],
        current_question_required=required
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if question_type == "select":
        await show_select_question(obj, question, current_index, len(all_questions), text)
        
    elif question_type == "multiselect":
        await show_multiselect_question(obj, state, question, current_index, len(all_questions), text)
        
    elif question_type in ["text", "number", "date", "time", "list"]:
        await show_input_question(obj, state, question, question_type, current_index, len(all_questions), text, required)


async def show_select_question(obj, question, current_index, total_questions, text):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞
    for option in question["options"]:
        builder.row(
            InlineKeyboardButton(
                text=option['label'],
                callback_data=f"onb_answer_{question['id']}_{option['value']}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_keyboard = get_navigation_keyboard(current_index, total_questions, question.get("required", True))
    for row in nav_keyboard.inline_keyboard:
        builder.row(*row)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(obj, 'message'):  # CallbackQuery
        await obj.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    else:  # Message
        await obj.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")


async def show_multiselect_question(obj, state, question, current_index, total_questions, text):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    data = await state.get_data()
    selected = data.get("multiselect_temp", [])
    
    builder = InlineKeyboardBuilder()
    
    # –û–ø—Ü–∏–∏ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
    for option in question["options"]:
        is_selected = option['value'] in selected
        checkbox = "‚úÖ" if is_selected else "‚¨ú"
        builder.row(
            InlineKeyboardButton(
                text=f"{checkbox} {option['label']}",
                callback_data=f"onb_multi_{question['id']}_{option['value']}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" (–∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    if selected or not question.get("required", True):
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –î–∞–ª–µ–µ",
                callback_data=f"onb_multi_done_{question['id']}"
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_keyboard = get_navigation_keyboard(current_index, total_questions, question.get("required", True))
    for row in nav_keyboard.inline_keyboard:
        builder.row(*row)
    
    if hasattr(obj, 'message'):
        await obj.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    else:
        await obj.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")


async def show_input_question(obj, state, question, question_type, current_index, total_questions, text, required):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞/—á–∏—Å–ª–∞/–¥–∞—Ç—ã"""
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–≤–æ–¥—É
    input_instructions = {
        "text": "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
        "number": "üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
        "date": "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
        "time": "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
        "list": "üìã –í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    }
    
    text += f"\n\n{input_instructions.get(question_type, 'üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:')}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤
    if question_type == "date" and question.get("validation") == "future_date":
        keyboard = get_date_quick_select_keyboard()
    elif question_type == "number" and "min" in question and "max" in question:
        keyboard = get_number_quick_select_keyboard(
            question["min"], 
            question["max"], 
            unit=question.get("unit", "")
        )
    else:
        keyboard = get_navigation_keyboard(current_index, total_questions, required)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(obj, 'message'):
        await obj.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await obj.answer(text, reply_markup=keyboard, parse_mode="HTML")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    state_map = {
        "text": AssistantOnboardingStates.waiting_for_text,
        "number": AssistantOnboardingStates.waiting_for_number,
        "date": AssistantOnboardingStates.waiting_for_date,
        "time": AssistantOnboardingStates.waiting_for_time,
        "list": AssistantOnboardingStates.waiting_for_list
    }
    await state.set_state(state_map[question_type])


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò ===

@router.callback_query(F.data == "onb_previous")
async def go_to_previous_question(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É"""
    data = await state.get_data()
    current_index = data.get("current_question_index", 0)
    
    if current_index > 0:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.update_data(current_question_index=current_index - 1)
        await show_next_question(callback, state)
    
    await callback.answer()


@router.callback_query(F.data == "onb_skip_current")
async def skip_current_question(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    question_id = data.get("current_question_id")
    current_index = data.get("current_question_index", 0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º null –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    answers = data.get("answers", {})
    answers[question_id] = None
    
    await state.update_data(
        answers=answers,
        current_question_index=current_index + 1
    )
    
    await show_next_question(callback, state)
    await callback.answer("–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω")


# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ) ===

@router.callback_query(F.data == "ai_assistant_start")
async def start_ai_onboarding(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ - –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞–Ω–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    profile = await profile_db.get_profile(callback.from_user.id)
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–ª–∞–Ω —É–∂–µ –µ—Å—Ç—å - —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —ç—Ç—É –∫–Ω–æ–ø–∫—É
    # (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞)
    if profile and profile.plan:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        from handlers import assistant
        await assistant.show_assistant_menu(callback)
        return
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å, –Ω–æ –ø–ª–∞–Ω–∞ –Ω–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if profile and profile.onboarding.completed and not profile.plan:
        await callback.message.edit_text(
            "‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –ø–ª–∞–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω</b>\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data="onb_generate_plan_from_profile")],
                [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="onb_restart_confirmed")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="assistant_menu")]
            ]),
            parse_mode="HTML"
        )
        return
    
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    await callback.message.edit_text(
        "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_category_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(AssistantOnboardingStates.choosing_category)
    await callback.answer()


@router.callback_query(F.data == "onb_restart_with_delete")
async def restart_onboarding_with_delete(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ –ø–ª–∞–Ω–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–∞–Ω
    success = await profile_db.delete_plan(callback.from_user.id)
    
    if success:
        await callback.message.edit_text(
            "<b>‚úÖ –°—Ç–∞—Ä—ã–π –ø–ª–∞–Ω —É–¥–∞–ª—ë–Ω</b>\n\n"
            "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞...",
            parse_mode="HTML"
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UX
        import asyncio
        await asyncio.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ
        await restart_onboarding_confirmed(callback, state)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞", show_alert=True)


@router.callback_query(F.data == "onb_generate_plan_from_profile")
async def generate_plan_from_existing_profile(callback: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile = await profile_db.get_profile(callback.from_user.id)
    
    if not profile or not profile.onboarding.completed:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "<b>‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...</b>",
        parse_mode="HTML"
    )
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
        plan = await generate_plan(
            category=profile.active_category,
            answers=profile.onboarding.answers,
            constraints=profile.constraints.dict() if profile.constraints else {},
            horizon_days=15
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
        await state.update_data(
            generated_plan=plan.dict(),
            current_start_day=1
        )
        await state.set_state(PlanPreviewStates.viewing)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        await show_plan_preview(callback.message, plan, 1)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="onb_restart_confirmed")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="assistant_menu")]
            ]),
            parse_mode="HTML"
        )


@router.callback_query(F.data == "onb_restart_confirmed")
async def restart_onboarding_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await callback.message.edit_text(
        "üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏:",
        reply_markup=get_category_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(AssistantOnboardingStates.choosing_category)
    await callback.answer()


@router.callback_query(F.data.startswith("onb_category_"), StateFilter(AssistantOnboardingStates.choosing_category))
async def process_category_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    category = callback.data.split("_")[2]
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    category_questions = QUESTIONS_DATA["categories"][category]["questions"]
    constraint_questions = QUESTIONS_DATA.get("constraints_questions", {}).get("general", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
    await state.update_data(
        category=category,
        answers={},
        current_question_index=0,
        category_questions=category_questions,
        constraint_questions=constraint_questions,
        multiselect_temp=[]
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not await profile_db.get_profile(callback.from_user.id):
        await profile_db.create_profile(callback.from_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await profile_db.save_onboarding_answer(callback.from_user.id, "category", category)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    await state.set_state(AssistantOnboardingStates.answering_questions)
    await show_next_question(callback, state)
    await callback.answer()


@router.callback_query(F.data.startswith("onb_answer_"))
async def process_select_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    parts = callback.data.split("_", 3)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º split –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π –≤ –∑–Ω–∞—á–µ–Ω–∏–∏
    question_id = parts[2]
    answer = parts[3] if len(parts) > 3 else ""
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    try:
        answer = int(answer)
    except ValueError:
        pass  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    data = await state.get_data()
    answers = data.get("answers", {})
    answers[question_id] = answer
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await profile_db.save_onboarding_answer(callback.from_user.id, question_id, answer)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_index = data.get("current_question_index", 0)
    await state.update_data(
        answers=answers,
        current_question_index=current_index + 1
    )
    
    await show_next_question(callback, state)
    await callback.answer()


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô ===

@router.message(StateFilter(AssistantOnboardingStates.waiting_for_text))
async def process_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    data = await state.get_data()
    question = data.get("current_question", {})
    question_id = data.get("current_question_id")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if "min_length" in question and len(message.text) < question["min_length"]:
        await message.answer(f"‚ùå –ú–∏–Ω–∏–º—É–º {question['min_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        await message.delete()
        return
    
    if "max_length" in question and len(message.text) > question["max_length"]:
        await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º—É–º {question['max_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        await message.delete()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers = data.get("answers", {})
    answers[question_id] = message.text
    
    await profile_db.save_onboarding_answer(message.from_user.id, question_id, message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
    current_index = data.get("current_question_index", 0)
    await state.update_data(
        answers=answers,
        current_question_index=current_index + 1
    )
    
    await message.delete()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    new_msg = await message.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await asyncio.sleep(0.5)
    await new_msg.delete()
    
    await state.set_state(AssistantOnboardingStates.answering_questions)
    bot_msg = await message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
    await show_next_question(bot_msg, state)


@router.message(StateFilter(AssistantOnboardingStates.waiting_for_date))
async def process_date_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        date_formats = ["%d.%m.%Y", "%d-%m-%Y", "%d/%m/%Y", "%Y-%m-%d"]
        date_value = None
        
        for fmt in date_formats:
            try:
                date_value = datetime.strptime(message.text, fmt).date()
                break
            except ValueError:
                continue
        
        if not date_value:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            await message.delete()
            return
        
        data = await state.get_data()
        question = data.get("current_question", {})
        question_id = data.get("current_question_id")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥—É—â–µ–π –¥–∞—Ç—ã
        if question.get("validation") == "future_date" and date_value <= date.today():
            await message.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            await message.delete()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answers = data.get("answers", {})
        answers[question_id] = date_value.isoformat()
        
        await profile_db.save_onboarding_answer(message.from_user.id, question_id, date_value.isoformat())
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
        current_index = data.get("current_question_index", 0)
        await state.update_data(
            answers=answers,
            current_question_index=current_index + 1
        )
        
        await message.delete()
        
        new_msg = await message.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        await asyncio.sleep(0.5)
        await new_msg.delete()
        
        await state.set_state(AssistantOnboardingStates.answering_questions)
        bot_msg = await message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
        await show_next_question(bot_msg, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã")
        await message.delete()


@router.message(StateFilter(AssistantOnboardingStates.waiting_for_list))
async def process_list_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    data = await state.get_data()
    question = data.get("current_question", {})
    question_id = data.get("current_question_id")
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫
    items = [item.strip() for item in message.text.split(",") if item.strip()]
    
    if not items:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç")
        await message.delete()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers = data.get("answers", {})
    answers[question_id] = items
    
    await profile_db.save_onboarding_answer(message.from_user.id, question_id, items)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
    current_index = data.get("current_question_index", 0)
    await state.update_data(
        answers=answers,
        current_question_index=current_index + 1
    )
    
    await message.delete()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    new_msg = await message.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await asyncio.sleep(0.5)
    await new_msg.delete()
    
    await state.set_state(AssistantOnboardingStates.answering_questions)
    bot_msg = await message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
    await show_next_question(bot_msg, state)


# === –ü–û–ö–ê–ó –°–í–û–î–ö–ò ===

async def show_summary(obj: Any, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º"""
    data = await state.get_data()
    category = data.get("category")
    answers = data.get("answers", {})
    
    category_info = QUESTIONS_DATA["categories"][category]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
    text = f"üìä <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
    text += f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_info['emoji']} {category_info['title']}\n\n"
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    text += "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_questions = data.get("category_questions", [])
    for q in category_questions:
        if q["id"] in answers and answers[q["id"]] is not None:
            value = answers[q["id"]]
            if isinstance(value, list):
                value_str = ", ".join(str(v) for v in value)
            else:
                value_str = str(value)
            
            # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if len(value_str) > 50:
                value_str = value_str[:50] + "..."
            
            text += f"‚Ä¢ {q['text'][:40]}...: <code>{value_str}</code>\n"
    
    text += "\n<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    constraint_questions = data.get("constraint_questions", [])
    for q in constraint_questions:
        if q["id"] in answers and answers[q["id"]] is not None:
            value = answers[q["id"]]
            if q["id"] == "working_days":
                days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                value_str = ", ".join(days[d-1] for d in value if 1 <= d <= 7)
            elif q["id"] == "daily_time_minutes":
                hours = value // 60
                minutes = value % 60
                value_str = f"{hours}—á {minutes}–º–∏–Ω" if hours > 0 else f"{minutes} –º–∏–Ω—É—Ç"
            else:
                value_str = str(value)
            
            text += f"‚Ä¢ {q['text'][:40]}...: <code>{value_str}</code>\n"
    
    text += "\n<b>–í—Å–µ –≤–µ—Ä–Ω–æ?</b>"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    keyboard = get_confirmation_keyboard()
    
    if hasattr(obj, 'message'):  # CallbackQuery
        await obj.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:  # Message
        await obj.answer(text, reply_markup=keyboard, parse_mode="HTML")
    
    await state.set_state(AssistantOnboardingStates.confirming_data)


@router.callback_query(F.data == "onb_confirm_final", StateFilter(AssistantOnboardingStates.confirming_data))
async def finalize_onboarding(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    data = await state.get_data()
    category = data.get("category")
    answers = data.get("answers", {})
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    constraints = {
        "daily_minutes": answers.get("daily_time_minutes", 60),
        "daily_time_minutes": answers.get("daily_time_minutes", 60),
        "working_days": answers.get("working_days", [1, 2, 3, 4, 5])
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_specific = {}
    category_questions = data.get("category_questions", [])
    
    for q in category_questions:
        if q["id"] in answers and answers[q["id"]] is not None:
            category_specific[q["id"]] = answers[q["id"]]
    
    # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    success = await profile_db.finalize_onboarding(
        callback.from_user.id,
        category,
        answers,
        constraints
    )
    
    if success:
        await callback.message.edit_text(
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.</b>\n\n"
            "ü§ñ –°–µ–π—á–∞—Å –ò–ò —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
            parse_mode="HTML"
        )
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
            plan = await generate_plan(
                category=category,
                answers=answers,
                constraints=constraints,
                horizon_days=15
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
            await state.update_data(
                generated_plan=plan.dict(),
                current_start_day=1
            )
            
            # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞
            await state.set_state(AssistantOnboardingStates.viewing_generated_plan)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –ø–ª–∞–Ω–∞
            await show_plan_preview(callback.message, plan, 1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="assistant_menu")]
                ]),
                parse_mode="HTML"
            )
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data.startswith("plan:"), StateFilter(AssistantOnboardingStates.viewing_generated_plan))
async def handle_plan_actions_in_onboarding(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–∞–Ω–æ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    
    if callback.data == "plan:save":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
        data = await state.get_data()
        plan_dict = data.get("generated_plan")
        
        if not plan_dict:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ë–î
        _, profile_db = get_db()
        if not profile_db:
            await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        success = await profile_db.save_plan(callback.from_user.id, plan_dict)
        
        if success:
            await callback.message.edit_text(
                "üéâ <b>–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Å–≤–æ–µ–π —Ü–µ–ª—å—é.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="ai_show_plan")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", callback_data="assistant_menu")]
                ]),
                parse_mode="HTML"
            )
            
            await state.clear()
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞", show_alert=True)
    
    elif callback.data == "plan:cancel":
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", callback_data="assistant_menu")]
            ]),
            parse_mode="HTML"
        )
    
    elif callback.data.startswith("plan:prev:") or callback.data.startswith("plan:next:"):
        # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∏–∑ assistant_plan
        from handlers.assistant_plan import handle_plan_prev, handle_plan_next
        
        if callback.data.startswith("plan:prev:"):
            await handle_plan_prev(callback, state)
        else:
            await handle_plan_next(callback, state)
    
    await callback.answer()


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def get_category_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    for category_id, category_data in QUESTIONS_DATA["categories"].items():
        builder.row(
            InlineKeyboardButton(
                text=f"{category_data['emoji']} {category_data['title']}",
                callback_data=f"onb_category_{category_id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="assistant_menu"
        )
    )
    
    return builder.as_markup()


def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            callback_data="onb_confirm_final"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã",
            callback_data="onb_restart_confirmed"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="onb_cancel"
        )
    )
    
    return builder.as_markup()




def get_date_quick_select_keyboard() -> InlineKeyboardMarkup:
    """–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    from datetime import timedelta
    
    builder = InlineKeyboardBuilder()
    today = date.today()
    
    options = [
        ("–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", 7),
        ("–ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏", 14),
        ("–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü", 30),
        ("–ß–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞", 60),
        ("–ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞", 90)
    ]
    
    for label, days in options:
        target_date = today + timedelta(days=days)
        builder.row(
            InlineKeyboardButton(
                text=f"{label} ({target_date.strftime('%d.%m.%Y')})",
                callback_data=f"onb_date_{target_date.isoformat()}"
            )
        )
    
    return builder.as_markup()


def get_number_quick_select_keyboard(min_val: int, max_val: int, unit: str = "") -> InlineKeyboardMarkup:
    """–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —á–∏—Å–ª–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –æ–ø—Ü–∏–∏
    if max_val - min_val <= 10:
        options = list(range(min_val, max_val + 1))
    else:
        step = (max_val - min_val) // 5
        options = [min_val + i * step for i in range(6)]
        if max_val not in options:
            options[-1] = max_val
    
    # –ö–Ω–æ–ø–∫–∏ –≤ 2 —Ä—è–¥–∞
    for i in range(0, len(options), 3):
        row_options = options[i:i+3]
        builder.row(*[
            InlineKeyboardButton(
                text=f"{opt}{unit}",
                callback_data=f"onb_number_{opt}"
            )
            for opt in row_options
        ])
    
    return builder.as_markup()


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–´–°–¢–†–û–ì–û –í–´–ë–û–†–ê ===

@router.callback_query(F.data.startswith("onb_date_"))
async def process_quick_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    date_str = callback.data.split("_")[2]
    
    data = await state.get_data()
    question_id = data.get("current_question_id")
    answers = data.get("answers", {})
    answers[question_id] = date_str
    
    await profile_db.save_onboarding_answer(callback.from_user.id, question_id, date_str)
    
    current_index = data.get("current_question_index", 0)
    await state.update_data(
        answers=answers,
        current_question_index=current_index + 1
    )
    
    await state.set_state(AssistantOnboardingStates.answering_questions)
    await show_next_question(callback, state)
    await callback.answer()


@router.callback_query(F.data.startswith("onb_number_"))
async def process_quick_number(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    number = int(callback.data.split("_")[2])
    
    data = await state.get_data()
    question_id = data.get("current_question_id")
    answers = data.get("answers", {})
    answers[question_id] = number
    
    await profile_db.save_onboarding_answer(callback.from_user.id, question_id, number)
    
    current_index = data.get("current_question_index", 0)
    await state.update_data(
        answers=answers,
        current_question_index=current_index + 1
    )
    
    await state.set_state(AssistantOnboardingStates.answering_questions)
    await show_next_question(callback, state)
    await callback.answer()


@router.callback_query(F.data == "onb_cancel")
async def cancel_onboarding(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", callback_data="assistant_menu")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("onb_multi_"))
async def process_multiselect(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    if callback.data.startswith("onb_multi_done_"):
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        question_id = callback.data.split("_")[3]
        data = await state.get_data()
        selected = data.get("multiselect_temp", [])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answers = data.get("answers", {})
        answers[question_id] = selected
        
        await profile_db.save_onboarding_answer(callback.from_user.id, question_id, selected)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
        current_index = data.get("current_question_index", 0)
        await state.update_data(
            answers=answers,
            current_question_index=current_index + 1,
            multiselect_temp=[]
        )
        
        await show_next_question(callback, state)
        await callback.answer()
    else:
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
        parts = callback.data.split("_")
        question_id = parts[2]
        value = int(parts[3]) if parts[3].isdigit() else parts[3]
        
        data = await state.get_data()
        selected = data.get("multiselect_temp", [])
        
        if value in selected:
            selected.remove(value)
            await callback.answer("–£–±—Ä–∞–Ω–æ –∏–∑ –≤—ã–±–æ—Ä–∞")
        else:
            selected.append(value)
            await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤—ã–±–æ—Ä")
        
        await state.update_data(multiselect_temp=selected)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await show_next_question(callback, state)

@router.callback_query(F.data == "ai_show_plan")
async def show_current_plan(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –ë–î
    _, profile_db = get_db()
    if not profile_db:
        await callback.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile = await profile_db.get_profile(callback.from_user.id)
    
    if not profile or not profile.plan:
        await callback.message.edit_text(
            "‚ùå <b>–ü–ª–∞–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data="ai_assistant_start")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="assistant_menu")]
            ]),
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await state.update_data(
        viewing_plan=profile.plan.dict(),
        current_start_day=1,
        is_view_mode=True
    )
    await state.set_state(PlanPreviewStates.viewing)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ assistant_plan
    await show_plan_preview(callback.message, profile.plan, 1, is_view_mode=True)
    await callback.answer()



