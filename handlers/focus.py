"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ (–ü–æ–º–æ–¥–æ—Ä–æ)
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤—ã–º FocusService
"""
import logging
from datetime import datetime, timezone
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import default_state
from aiogram.filters import Command

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from services.focus_service import FocusService, SessionType
from states.focus import FocusStates
from keyboards.focus import (
    get_focus_menu_keyboard,
    get_session_control_keyboard,
    get_duration_presets_keyboard,
    get_focus_settings_keyboard,
    get_stats_period_keyboard
)
from keyboards.main_menu import get_main_menu_keyboard

logger = logging.getLogger(__name__)
router = Router()

# üëâ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø–æ–ª–Ω–∏—Ç main.py –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
focus_service: FocusService | None = None

def _get_focus_service() -> FocusService:
    """–ü–æ–ª—É—á–∞–µ—Ç FocusService –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
    assert focus_service is not None, "FocusService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    return focus_service

# –î–û–ë–ê–í–õ–ï–ù–û: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ—Å—Å–∏—è–º–∏
session_messages = {}


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def create_progress_bar(elapsed: int, total: int, length: int = 20) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
    –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    if total == 0:
        return "‚ñ±" * length
    
    filled = int(length * elapsed / total)
    empty = length - filled
    
    bar = "‚ñ∞" * filled + "‚ñ±" * empty
    percentage = int(100 * elapsed / total)
    
    return f"[{bar}] {percentage}%"


async def update_session_progress(bot: Bot, session_id: str, remaining_minutes: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —Å–µ—Å—Å–∏–∏
    –î–û–ë–ê–í–õ–ï–ù–û: –ö–æ–ª–±–µ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ç–∏–∫–µ —Ç–∞–π–º–µ—Ä–∞
    """
    if session_id not in session_messages:
        return
    
    msg_info = session_messages[session_id]
    service = _get_focus_service()
    
    if not service:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        session = await service.get_session_info(msg_info['user_id'])
        if not session:
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        elapsed = session['duration_minutes'] - remaining_minutes
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = create_progress_bar(elapsed, session['duration_minutes'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Å—Å–∏–∏
        session_type = "üéØ –†–∞–±–æ—Ç–∞" if session['type'] == 'work' else "‚òï –ü–µ—Ä–µ—Ä—ã–≤"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = (
            f"{session_type} - <b>–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session['duration_minutes']} –º–∏–Ω—É—Ç\n"
            f"{progress_bar}\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes} –º–∏–Ω\n"
            f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {elapsed} –º–∏–Ω"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            text=text,
            chat_id=msg_info['chat_id'],
            message_id=msg_info['message_id'],
            reply_markup=get_session_control_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")


# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –§–û–ö–£–°–ê ===

@router.message(F.text == "‚è± –§–æ–∫—É—Å")
async def handle_focus_menu(message: Message, state: FSMContext = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –§–æ–∫—É—Å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if state:
        await state.clear()
    await show_focus_menu(message)


async def show_focus_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–æ–∫—É—Å–∞"""
    service = _get_focus_service()
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if not service:
        logger.error("FocusService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è —Ñ–æ–∫—É—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    user_id = str(message.from_user.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = await service.get_session_info(user_id)
        
        if session:
            # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            status_emoji = "‚è∏" if session['status'] == 'paused' else "‚è±"
            session_type = "üéØ –†–∞–±–æ—Ç–∞" if session['type'] == 'work' else "‚òï –ü–µ—Ä–µ—Ä—ã–≤"
            
            text = (
                f"{status_emoji} <b>–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è</b>\n\n"
                f"–¢–∏–ø: {session_type}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ù–∞ –ø–∞—É–∑–µ' if session['status'] == 'paused' else '–ê–∫—Ç–∏–≤–Ω–∞'}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {session.get('remaining_minutes', 0)} –º–∏–Ω\n"
                f"–ü—Ä–æ—à–ª–æ: {session.get('elapsed_minutes', 0)} –º–∏–Ω"
            )
            
            keyboard = get_session_control_keyboard(
                is_paused=(session['status'] == 'paused')
            )
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
            settings = await service.db.get_user_settings(user_id)
            stats = await service.db.get_user_stats(user_id)
            
            text = (
                "üéØ <b>–§–æ–∫—É—Å-—Ä–µ–∂–∏–º</b>\n\n"
                "–¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã:\n"
                f"‚Ä¢ ‚è± {settings['work_duration']} –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã\n"
                f"‚Ä¢ ‚òï {settings['short_break_duration']} –º–∏–Ω—É—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞\n"
                f"‚Ä¢ üå¥ {settings['long_break_duration']} –º–∏–Ω—É—Ç –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤\n\n"
                f"üî• –¢–µ–∫—É—â–∏–π streak: {stats.get('current_streak', 0)} –¥–Ω–µ–π\n"
                f"üìä –°–µ–≥–æ–¥–Ω—è: {stats.get('sessions_today', 0)} —Å–µ—Å—Å–∏–π"
            )
            
            keyboard = get_focus_menu_keyboard()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Ñ–æ–∫—É—Å–∞: {e}", exc_info=True)
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é"
        keyboard = get_main_menu_keyboard()
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–ï–ô ===

@router.callback_query(F.data == "start_focus")
async def start_focus_session(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é"""
    service = _get_focus_service()
    
    if not service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    user_id = str(callback.from_user.id)
    
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        session = await service.start_session(user_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(FocusStates.in_focus_session)
        await state.update_data(session_id=session['id'])
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å–µ—Å—Å–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        session_messages[session['id']] = {
            'chat_id': callback.message.chat.id,
            'message_id': callback.message.message_id,
            'user_id': user_id
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        progress_bar = create_progress_bar(0, session['duration_minutes'])
        text = (
            f"üéØ <b>–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session['duration_minutes']} –º–∏–Ω—É—Ç\n"
            f"{progress_bar}\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {session['duration_minutes']} –º–∏–Ω\n\n"
            f"üí° –°–æ–≤–µ—Ç—ã:\n"
            f"‚Ä¢ –û—Ç–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            f"‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ\n"
            f"‚Ä¢ –ù–µ –æ—Ç–≤–ª–µ–∫–∞–π—Å—è –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_session_control_keyboard(),
            parse_mode="HTML"
        )
        
        logger.info(f"–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è {session['id']} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
        
    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer(str(e), show_alert=True)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data == "pause_focus", StateFilter(FocusStates.in_focus_session))
async def pause_focus_session(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞–≤–∏—Ç —Å–µ—Å—Å–∏—é –Ω–∞ –ø–∞—É–∑—É"""
    service = _get_focus_service()
    
    if not service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    user_id = str(callback.from_user.id)
    
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å—Ç–∞–≤–∏—Ç —Å–µ—Å—Å–∏—é –Ω–∞ –ø–∞—É–∑—É")
        
        session = await service.pause_session(user_id)
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–∏ –ø–∞—É–∑–µ
        progress_bar = create_progress_bar(
            session['completed_minutes'], 
            session['duration_minutes']
        )
        
        text = (
            f"‚è∏ <b>–°–µ—Å—Å–∏—è –Ω–∞ –ø–∞—É–∑–µ</b>\n\n"
            f"{progress_bar}\n"
            f"–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {session['completed_minutes']} –º–∏–Ω\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {session['duration_minutes'] - session['completed_minutes']} –º–∏–Ω\n\n"
            f"–ù–∞–∂–º–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_session_control_keyboard(is_paused=True),
            parse_mode="HTML"
        )
        
        logger.info(f"–°–µ—Å—Å–∏—è {session['id']} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É")
        
    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—É–∑–µ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer(str(e), show_alert=True)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—É–∑–µ: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data == "resume_focus", StateFilter(FocusStates.in_focus_session))
async def resume_focus_session(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –ø–∞—É–∑—ã"""
    service = _get_focus_service()
    
    if not service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    user_id = str(callback.from_user.id)
    
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é")
        
        session = await service.resume_session(user_id)
        
        remaining = session['duration_minutes'] - session['completed_minutes']
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å–µ—Å—Å–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        session_messages[session['id']] = {
            'chat_id': callback.message.chat.id,
            'message_id': callback.message.message_id,
            'user_id': user_id
        }
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        progress_bar = create_progress_bar(
            session['completed_minutes'], 
            session['duration_minutes']
        )
        
        text = (
            f"‚ñ∂Ô∏è <b>–°–µ—Å—Å–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            f"{progress_bar}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining} –º–∏–Ω\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å!"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_session_control_keyboard(),
            parse_mode="HTML"
        )
        
        logger.info(f"–°–µ—Å—Å–∏—è {session['id']} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        await callback.answer(str(e), show_alert=True)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data == "stop_focus", StateFilter(FocusStates.in_focus_session))
async def stop_focus_session(callback: CallbackQuery, state: FSMContext):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é"""
    service = _get_focus_service()
    
    if not service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    user_id = str(callback.from_user.id)
    
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        session = await service.get_session_info(user_id)
        
        if not session:
            await callback.answer("–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            await state.clear()
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        completed_minutes, is_completed = await service.stop_session(user_id, completed=False)
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å —Å–µ—Å—Å–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if session['id'] in session_messages:
            del session_messages[session['id']]
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        progress_bar = create_progress_bar(completed_minutes, session['duration_minutes'])
        
        if is_completed:
            text = (
                f"‚úÖ <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"{progress_bar}\n"
                f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è {completed_minutes} –º–∏–Ω—É—Ç.\n"
                f"–í—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ üòä"
            )
        else:
            text = (
                f"‚èπ <b>–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞</b>\n\n"
                f"{progress_bar}\n"
                f"–¢—ã –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª {completed_minutes} –º–∏–Ω—É—Ç.\n"
                f"–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –¥–æ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞!"
            )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_focus_menu_keyboard(),
            parse_mode="HTML"
        )
        
        logger.info(f"–°–µ—Å—Å–∏—è {session['id']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({'–∑–∞–≤–µ—Ä—à–µ–Ω–∞' if is_completed else '–æ—Ç–º–µ–Ω–µ–Ω–∞'})")
        
    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer(str(e), show_alert=True)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


# === –ù–ê–°–¢–†–û–ô–ö–ò ===

@router.callback_query(F.data == "focus_settings")
async def show_focus_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–∫—É—Å–∞"""
    service = _get_focus_service()
    
    if not service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    user_id = str(callback.from_user.id)
    
    try:
        settings = await service.db.get_user_settings(user_id)
        
        # notifications removed - —É–±—Ä–∞–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–∫—É—Å–∞</b>\n\n"
            f"‚è± –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è: {settings['work_duration']} –º–∏–Ω\n"
            f"‚òï –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: {settings['short_break_duration']} –º–∏–Ω\n"
            f"üå¥ –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: {settings['long_break_duration']} –º–∏–Ω\n"
            f"üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ—Ä—ã–≤: {'‚úÖ –í–∫–ª' if settings['auto_start_break'] else '‚ùå –í—ã–∫–ª'}\n"
            f"üéØ –¶–µ–ª—å –Ω–∞ –¥–µ–Ω—å: {settings['daily_goal']} —Å–µ—Å—Å–∏–π"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_focus_settings_keyboard(settings),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("set_duration:"))
async def set_duration(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π"""
    service = _get_focus_service()
    
    if not service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    user_id = str(callback.from_user.id)
    _, duration_type = callback.data.split(":")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if duration_type == "work":
        text = "‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏:</b>"
        presets = [15, 25, 30, 45, 50, 60]
    elif duration_type == "short_break":
        text = "‚òï <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞:</b>"
        presets = [3, 5, 10, 15]
    else:  # long_break
        text = "üå¥ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞:</b>"
        presets = [15, 20, 25, 30]
    
    keyboard = get_duration_presets_keyboard(duration_type, presets)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("duration:"))
async def save_duration(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
    service = _get_focus_service()
    
    if not service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    user_id = str(callback.from_user.id)
    _, duration_type, minutes = callback.data.split(":")
    minutes = int(minutes)
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_update = {}
        if duration_type == "work":
            settings_update['work_duration'] = minutes
            message = f"‚úÖ –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è: {minutes} –º–∏–Ω"
        elif duration_type == "short_break":
            settings_update['short_break_duration'] = minutes
            message = f"‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: {minutes} –º–∏–Ω"
        else:
            settings_update['long_break_duration'] = minutes
            message = f"‚úÖ –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: {minutes} –º–∏–Ω"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await service.update_settings(user_id, settings_update)
        
        await callback.answer(message)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await show_focus_settings(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# notifications removed - –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ toggle_notifications


@router.callback_query(F.data == "toggle_auto_break")
async def toggle_auto_break(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤"""
    service = _get_focus_service()
    
    if not service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    user_id = str(callback.from_user.id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await service.db.get_user_settings(user_id)
        new_value = not settings['auto_start_break']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º
        await service.update_settings(user_id, {'auto_start_break': new_value})
        
        await callback.answer(
            f"–ê–≤—Ç–æ-–ø–µ—Ä–µ—Ä—ã–≤ {'–≤–∫–ª—é—á–µ–Ω ‚úÖ' if new_value else '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå'}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_focus_settings(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ-–ø–µ—Ä–µ—Ä—ã–≤–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

@router.callback_query(F.data == "focus_stats")
async def show_focus_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π"""
    service = _get_focus_service()
    
    if not service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
        reply_markup=get_stats_period_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("stats_period:"))
async def show_period_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    service = _get_focus_service()
    
    if not service:
        await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    user_id = str(callback.from_user.id)
    _, period = callback.data.split(":")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        stats = await service.get_stats(user_id, period)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        period_names = {
            'today': '–°–µ–≥–æ–¥–Ω—è',
            'week': '–ó–∞ –Ω–µ–¥–µ–ª—é',
            'month': '–ó–∞ –º–µ—Å—è—Ü',
            'all': '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è'
        }
        
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_names[period]}</b>\n\n"
        text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–µ—Å—Å–∏–π: {stats['completed_sessions']}\n"
        text += f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: {stats['total_minutes']} –º–∏–Ω\n"
        text += f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['avg_duration']} –º–∏–Ω\n"
        text += f"üî• –¢–µ–∫—É—â–∏–π streak: {stats['current_streak']} –¥–Ω–µ–π\n"
        text += f"üèÜ –õ—É—á—à–∏–π streak: {stats['best_streak']} –¥–Ω–µ–π"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="focus_stats")
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


# === –ü–û–ú–û–©–¨ ===

@router.callback_query(F.data == "focus_help")
async def show_focus_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –º–æ–¥—É–ª—é —Ñ–æ–∫—É—Å–∞"""
    text = (
        "‚ùì <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ–∫—É—Å-—Ä–µ–∂–∏–º</b>\n\n"
        "üéØ <b>–¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ</b>\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞–π 25 –º–∏–Ω—É—Ç –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π\n"
        "‚Ä¢ –°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤ 5 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ü–æ—Å–ª–µ 4 —Å–µ—Å—Å–∏–π - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤\n\n"
        "‚è± <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º</b>\n"
        "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏ —Å–µ—Å—Å–∏—é –∫–Ω–æ–ø–∫–æ–π '–ù–∞—á–∞—Ç—å'\n"
        "‚Ä¢ –ú–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É\n"
        "‚Ä¢ –ò–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ\n\n"
        "üìä <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π streak –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "‚Ä¢ –°—Ç–∞–≤—å —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞–π –∏—Ö!"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="focus")
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


# === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===

@router.callback_query(F.data == "focus")
async def back_to_focus_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–æ–∫—É—Å–∞"""
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Message –∏–∑ callback –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è show_focus_menu
    await show_focus_menu(callback.message)
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


# === –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ö–û–ú–ê–ù–î–ê ===

@router.message(Command("focus_status"))
async def debug_focus_status(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    service = _get_focus_service()
    
    if not service:
        await message.answer("‚ùå FocusService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    user_id = str(message.from_user.id)
    
    try:
        session = await service.get_session_info(user_id)
        active_timers = service.scheduler.get_active_timers()
        
        text = "üîç <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ Focus —Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
        text += f"‚úÖ –°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω\n"
        text += f"‚è± –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: {len(active_timers)}\n\n"
        
        if session:
            text += f"üìç <b>–í–∞—à–∞ —Å–µ—Å—Å–∏—è:</b>\n"
            text += f"ID: {session['id']}\n"
            text += f"–°—Ç–∞—Ç—É—Å: {session['status']}\n"
            text += f"–û—Å—Ç–∞–ª–æ—Å—å: {session.get('remaining_minutes', 0)} –º–∏–Ω"
        else:
            text += "üìç –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
