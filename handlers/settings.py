"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from database.firestore_db import FirestoreDB
from database.settings_db import SettingsDB
from keyboards.settings import get_settings_keyboard
from keyboards.main_menu import get_main_menu_keyboard

logger = logging.getLogger(__name__)
router = Router()


async def show_settings_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î
        db = FirestoreDB()
        settings_db = SettingsDB(db.db)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user_id = str(message.from_user.id)
        settings = settings_db.get_settings(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        notifications_status = "–í–∫–ª—é—á–µ–Ω—ã" if settings['notifications_enabled'] else "–í—ã–∫–ª—é—á–µ–Ω—ã"
        theme_names = {
            'system': 'System',
            'light': 'Light', 
            'dark': 'Dark'
        }
        current_theme = theme_names.get(settings['theme'], 'System')
        
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{notifications_status}</b>\n"
            f"üé® –¢–µ–º–∞: <b>{current_theme}</b>\n\n"
            "<i>–¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –≤ Mini App</i>"
        )
        
        await message.answer(
            text,
            reply_markup=get_settings_keyboard(settings),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            reply_markup=get_main_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
@router.message(Command("settings"))
async def settings_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    await show_settings_menu(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é
@router.message(F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await show_settings_menu(message)


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª/–≤—ã–∫–ª"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ë–î
        db = FirestoreDB()
        settings_db = SettingsDB(db.db)
        
        user_id = str(callback.from_user.id)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
        new_value = settings_db.toggle_notifications(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        settings = settings_db.get_settings(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        notifications_status = "–í–∫–ª—é—á–µ–Ω—ã" if new_value else "–í—ã–∫–ª—é—á–µ–Ω—ã"
        theme_names = {
            'system': 'System',
            'light': 'Light',
            'dark': 'Dark'
        }
        current_theme = theme_names.get(settings['theme'], 'System')
        
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{notifications_status}</b>\n"
            f"üé® –¢–µ–º–∞: <b>{current_theme}</b>\n\n"
            "<i>–¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –≤ Mini App</i>"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_settings_keyboard(settings),
            parse_mode="HTML"
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_status}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
@router.callback_query(F.data.startswith("set_theme:"))
async def set_theme_handler(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ callback_data
        theme = callback.data.split(":")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –ë–î
        db = FirestoreDB()
        settings_db = SettingsDB(db.db)
        
        user_id = str(callback.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É
        updated_settings = settings_db.update_settings(
            user_id,
            {'theme': theme}
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        notifications_status = "–í–∫–ª—é—á–µ–Ω—ã" if updated_settings['notifications_enabled'] else "–í—ã–∫–ª—é—á–µ–Ω—ã"
        theme_names = {
            'system': 'System',
            'light': 'Light',
            'dark': 'Dark'
        }
        current_theme = theme_names.get(theme, 'System')
        
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{notifications_status}</b>\n"
            f"üé® –¢–µ–º–∞: <b>{current_theme}</b>\n\n"
            "<i>–¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –≤ Mini App</i>"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_settings_keyboard(updated_settings),
            parse_mode="HTML"
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        await callback.answer(f"–¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {current_theme} (–ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –≤ Mini App)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "settings_back_to_main")
async def back_to_main_handler(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª/–≤—ã–∫–ª"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ë–î
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        db = FirestoreDB()
        logger.info("FirestoreDB —Å–æ–∑–¥–∞–Ω")
        
        settings_db = SettingsDB(db.db)
        logger.info("SettingsDB —Å–æ–∑–¥–∞–Ω")
        
        user_id = str(callback.from_user.id)
        logger.info(f"User ID: {user_id}")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
        new_value = settings_db.toggle_notifications(user_id)
        logger.info(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        settings = settings_db.get_settings(user_id)
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {settings}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        notifications_status = "–í–∫–ª—é—á–µ–Ω—ã" if new_value else "–í—ã–∫–ª—é—á–µ–Ω—ã"
        theme_names = {
            'system': 'System',
            'light': 'Light',
            'dark': 'Dark'
        }
        current_theme = theme_names.get(settings['theme'], 'System')
        
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{notifications_status}</b>\n"
            f"üé® –¢–µ–º–∞: <b>{current_theme}</b>\n\n"
            "<i>–¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –≤ Mini App</i>"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_settings_keyboard(settings),
            parse_mode="HTML"
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_status}")
        
    except Exception as e:
    # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –ø—Ä—è–º–æ –≤ —á–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      error_text = f"–¢–∏–ø: {type(e).__name__}\n–¢–µ–∫—Å—Ç: {str(e)}\n–ê—Ç—Ä–∏–±—É—Ç—ã: {dir(e)}"
    logger.error(f"–û–¢–õ–ê–î–ö–ê: {error_text}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º–µ–Ω–Ω–æ
    await callback.answer(error_text[:200], show_alert=True)
    
    # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º –≤ —á–∞—Ç –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    await callback.message.answer(f"<pre>–û–¢–õ–ê–î–ö–ê –û–®–ò–ë–ö–ò:\n{error_text}</pre>", parse_mode="HTML")