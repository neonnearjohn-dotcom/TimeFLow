"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
"""

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ReplyKeyboardBuilder –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = ReplyKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    buttons = [
        KeyboardButton(text="üìä –¢—Ä–µ–∫–µ—Ä—ã"),
        KeyboardButton(text="‚úì –ß–µ–∫-–ª–∏—Å—Ç"),
        KeyboardButton(text="‚è± –§–æ–∫—É—Å"),
        KeyboardButton(text="üí¨ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"),
        KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for button in buttons:
        builder.add(button)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(2)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º resize_keyboard –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
    return builder.as_markup(resize_keyboard=True)


def get_skip_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
    """
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    return builder.as_markup(resize_keyboard=True)


def main_menu_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üìä –¢—Ä–µ–∫–µ—Ä—ã", callback_data="trackers"),
        InlineKeyboardButton(text="‚úì –ß–µ–∫-–ª–∏—Å—Ç", callback_data="checklist"),
    )
    builder.row(
        InlineKeyboardButton(text="‚è± –§–æ–∫—É—Å", callback_data="focus"),
        InlineKeyboardButton(text="üí¨ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data="assistant"),
    )
    builder.row(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
    )
    """
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–¥—É–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞
"""


from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from typing import List, Dict, Any, Optional


def get_checklist_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ–∫-–ª–∏—Å—Ç–∞"""
    builder = InlineKeyboardBuilder()

    builder.row(InlineKeyboardButton(text="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="add_task"))
    builder.row(
        InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="active_tasks"),
        InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="completed_tasks"),
    )
    builder.row(InlineKeyboardButton(text="–í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="all_tasks"))
    builder.row(InlineKeyboardButton(text="‚óÄ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    return builder.as_markup()


def get_priority_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="‚óè –í–∞–∂–Ω–æ –∏ —Å—Ä–æ—á–Ω–æ", callback_data="priority:urgent_important")
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óè –í–∞–∂–Ω–æ, –Ω–æ –Ω–µ —Å—Ä–æ—á–Ω–æ", callback_data="priority:not_urgent_important"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óè –°—Ä–æ—á–Ω–æ, –Ω–æ –Ω–µ –≤–∞–∂–Ω–æ", callback_data="priority:urgent_not_important"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óè –ù–µ –≤–∞–∂–Ω–æ –∏ –Ω–µ —Å—Ä–æ—á–Ω–æ", callback_data="priority:not_urgent_not_important"
        )
    )
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation"))

    return builder.as_markup()


def get_tasks_list_keyboard(
    tasks: List[Dict[str, Any]], task_type: str = "all"
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á"""
    builder = InlineKeyboardBuilder()

    if not tasks:
        builder.row(InlineKeyboardButton(text="–ù–µ—Ç –∑–∞–¥–∞—á", callback_data="no_tasks"))
    else:
        for task in tasks:
            priority_symbol = get_priority_symbol(task.get("priority"))
            status = "‚úì" if task.get("is_completed") else "‚ñ∏"
            title = task.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

            builder.row(
                InlineKeyboardButton(
                    text=f"{status} {priority_symbol} {title}",
                    callback_data=f"task_detail:{task['id']}",
                )
            )

    builder.row(InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="checklist"))

    return builder.as_markup()


def get_task_actions_keyboard(task_id: str, is_completed: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–µ–π"""
    builder = InlineKeyboardBuilder()

    if not is_completed:
        builder.row(
            InlineKeyboardButton(text="‚úì –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_task:{task_id}")
        )
        builder.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_task:{task_id}"))

    builder.row(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task:{task_id}"))
    builder.row(InlineKeyboardButton(text="‚óÄ –ö –∑–∞–¥–∞—á–∞–º", callback_data="all_tasks"))

    return builder.as_markup()


def get_deadline_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
    builder = InlineKeyboardBuilder()

    builder.row(InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="deadline:today"))
    builder.row(InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="deadline:tomorrow"))
    builder.row(InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 3 –¥–Ω—è", callback_data="deadline:3days"))
    builder.row(InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data="deadline:week"))
    builder.row(InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü", callback_data="deadline:month"))
    builder.row(InlineKeyboardButton(text="–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="deadline:none"))
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_task_creation"))

    return builder.as_markup()


def get_skip_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    builder.add(KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="–î–∞", callback_data="confirm_yes"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_no"),
    )

    return builder.as_markup()


def get_priority_symbol(priority: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    priority_symbols = {
        "urgent_important": "‚óè",
        "not_urgent_important": "‚óã",
        "urgent_not_important": "‚óê",
        "not_urgent_not_important": "‚óØ",
    }
    return priority_symbols.get(priority, "‚ó¶")


def get_priority_emoji(priority: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return get_priority_symbol(priority)


def get_priority_name(priority: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    priority_names = {
        "urgent_important": "–í–∞–∂–Ω–æ –∏ —Å—Ä–æ—á–Ω–æ",
        "not_urgent_important": "–í–∞–∂–Ω–æ, –Ω–æ –Ω–µ —Å—Ä–æ—á–Ω–æ",
        "urgent_not_important": "–°—Ä–æ—á–Ω–æ, –Ω–æ –Ω–µ –≤–∞–∂–Ω–æ",
        "not_urgent_not_important": "–ù–µ –≤–∞–∂–Ω–æ –∏ –Ω–µ —Å—Ä–æ—á–Ω–æ",
    }
    return priority_names.get(priority, "–ë–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
    return builder.as_markup()


InlineKeyboardButton(text="üí¨ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data="assistant")
