"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""
from typing import List, Dict, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


def get_onboarding_start_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—á–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
            callback_data="ai_assistant_start"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
            callback_data="ai_how_it_works"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="assistant_menu"
        )
    )
    
    return builder.as_markup()

def get_plan_preview_keyboard(start_day: int, horizon_days: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–≤—å—é –ø–ª–∞–Ω–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    
    Args:
        start_day: –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        horizon_days: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–ª–∞–Ω–µ
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    buttons = []
    nav_row = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    if start_day > 1:
        nav_row.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"plan:prev:{start_day}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª—å—à–µ" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –¥–Ω–∏)
    if start_day + 2 < horizon_days:  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –¥–Ω—è
        nav_row.append(
            InlineKeyboardButton(
                text="–î–∞–ª—å—à–µ ‚ñ∂Ô∏è",
                callback_data=f"plan:next:{start_day}"
            )
        )
    
    if nav_row:
        buttons.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_row = [
        InlineKeyboardButton(
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω",
            callback_data="plan:save"
        ),
        InlineKeyboardButton(
            text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="plan:cancel"
        )
    ]
    buttons.append(action_row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_plan_saved_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
                callback_data="ai_progress"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è –í –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                callback_data="assistant_menu"
            )
        ]
    ])
    return keyboard


def get_plan_generate_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω",
                callback_data="plan:generate"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="assistant_menu"
            )
        ]
    ])
    return keyboard


def get_plan_management_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –ø–ª–∞–Ω–∞ (–∫–æ–≥–¥–∞ –ø–ª–∞–Ω —É–∂–µ –µ—Å—Ç—å):
    - "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω"  -> callback: "plan:open_preview"
    - "üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω"  -> callback: "plan:regenerate"  
    - "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"             -> callback: "plan:back"
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω",
                callback_data="plan:open_preview"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω",
                callback_data="plan:regenerate"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="plan:back"
            )
        ]
    ])
    return keyboard


def get_category_selection_keyboard(categories: Dict[str, Dict]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    for category_id, category_data in categories.items():
        builder.row(
            InlineKeyboardButton(
                text=f"{category_data['emoji']} {category_data['title']}",
                callback_data=f"onb_category_{category_id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="‚ùì –ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ",
            callback_data="onb_help_choose"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="assistant_menu"
        )
    )
    
    return builder.as_markup()


def get_progress_keyboard(current: int, total: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    builder = InlineKeyboardBuilder()
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    progress = int((current / total) * 10)
    progress_bar = "‚ñà" * progress + "‚ñë" * (10 - progress)
    
    builder.row(
        InlineKeyboardButton(
            text=f"[{progress_bar}] {current}/{total}",
            callback_data="progress"
        )
    )
    
    return builder.as_markup()


def get_skip_or_back_keyboard(can_skip: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    builder = InlineKeyboardBuilder()
    
    buttons = []
    if can_skip:
        buttons.append(
            InlineKeyboardButton(
                text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è",
                callback_data="onb_skip_current"
            )
        )
    
    buttons.append(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="onb_previous_question"
        )
    )
    
    builder.row(*buttons)
    
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="onb_cancel"
        )
    )
    
    return builder.as_markup()


def get_time_selection_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    builder = InlineKeyboardBuilder()
    
    # –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã
    morning_times = ["06:00", "07:00", "08:00", "09:00"]
    builder.row(*[
        InlineKeyboardButton(text=time, callback_data=f"onb_time_{time}")
        for time in morning_times
    ])
    
    # –î–Ω–µ–≤–Ω—ã–µ —á–∞—Å—ã
    day_times = ["10:00", "11:00", "12:00", "13:00"]
    builder.row(*[
        InlineKeyboardButton(text=time, callback_data=f"onb_time_{time}")
        for time in day_times
    ])
    
    # –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã
    evening_times = ["18:00", "19:00", "20:00", "21:00"]
    builder.row(*[
        InlineKeyboardButton(text=time, callback_data=f"onb_time_{time}")
        for time in evening_times
    ])
    
    builder.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
            callback_data="onb_time_manual"
        )
    )
    
    return builder.as_markup()


def get_date_quick_select_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    from datetime import date, timedelta
    
    builder = InlineKeyboardBuilder()
    today = date.today()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –æ–ø—Ü–∏–∏
    options = [
        ("–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", 7),
        ("–ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏", 14),
        ("–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü", 30),
        ("–ß–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞", 60),
        ("–ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞", 90)
    ]
    
    for label, days in options:
        target_date = today + timedelta(days=days)
        builder.row(
            InlineKeyboardButton(
                text=f"{label} ({target_date.strftime('%d.%m.%Y')})",
                callback_data=f"onb_date_{target_date.isoformat()}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
            callback_data="onb_date_manual"
        )
    )
    
    return builder.as_markup()


def get_number_quick_select_keyboard(min_val: int, max_val: int, step: int = 1, unit: str = "") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏
    options = []
    current = min_val
    while current <= max_val and len(options) < 8:
        options.append(current)
        if current < 5:
            current += 1
        elif current < 30:
            current += 5
        elif current < 60:
            current += 10
        else:
            current += 30
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(options), 4):
        row_options = options[i:i+4]
        builder.row(*[
            InlineKeyboardButton(
                text=f"{opt}{unit}",
                callback_data=f"onb_number_{opt}"
            )
            for opt in row_options
        ])
    
    builder.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
            callback_data="onb_number_manual"
        )
    )
    
    return builder.as_markup()


def get_help_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–º–æ—â–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üìö –≠–∫–∑–∞–º–µ–Ω—ã",
            callback_data="onb_help_exam"
        ),
        InlineKeyboardButton(
            text="üéØ –ù–∞–≤—ã–∫–∏",
            callback_data="onb_help_skill"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üå± –ü—Ä–∏–≤—ã—á–∫–∏",
            callback_data="onb_help_habit"
        ),
        InlineKeyboardButton(
            text="üí™ –ó–¥–æ—Ä–æ–≤—å–µ",
            callback_data="onb_help_health"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚è∞ –í—Ä–µ–º—è",
            callback_data="onb_help_time"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É",
            callback_data="ai_assistant_start"
        )
    )
    
    return builder.as_markup()


def get_example_keyboard(category: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    examples = {
        "exam": [
            ("–ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ", "–ï–ì–≠ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
            ("IELTS/TOEFL", "IELTS"),
            ("–≠–∫–∑–∞–º–µ–Ω –≤ –∞–≤—Ç–æ—à–∫–æ–ª–µ", "–ê–≤—Ç–æ—à–∫–æ–ª–∞"),
            ("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        ],
        "skill": [
            ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            ("–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–Ø–∑—ã–∫"),
            ("–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ú—É–∑—ã–∫–∞"),
            ("–†–∏—Å–æ–≤–∞–Ω–∏–µ", "–†–∏—Å–æ–≤–∞–Ω–∏–µ")
        ],
        "habit": [
            ("–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"),
            ("–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥", "–ß—Ç–µ–Ω–∏–µ"),
            ("–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞", "–ó–∞—Ä—è–¥–∫–∞"),
            ("–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "–ü–∏—Ç–∞–Ω–∏–µ")
        ],
        "health": [
            ("–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ü–æ—Ö—É–¥–µ–Ω–∏–µ"),
            ("–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã", "–ú—ã—à—Ü—ã"),
            ("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É", "–ú–∞—Ä–∞—Ñ–æ–Ω"),
            ("–ô–æ–≥–∞ –∏ –≥–∏–±–∫–æ—Å—Ç—å", "–ô–æ–≥–∞")
        ],
        "time": [
            ("–ë–æ—Ä—å–±–∞ —Å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π", "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è"),
            ("–ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç–∞/–∂–∏–∑–Ω—å", "–ë–∞–ª–∞–Ω—Å"),
            ("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            ("–§–æ–∫—É—Å –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è", "–§–æ–∫—É—Å")
        ]
    }
    
    if category in examples:
        for label, value in examples[category]:
            builder.row(
                InlineKeyboardButton(
                    text=f"‚Üí {label}",
                    callback_data=f"onb_example_{category}_{value}"
                )
            )
    
    builder.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
            callback_data=f"onb_custom_{category}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="ai_assistant_start"
        )
    )
    
    return builder.as_markup()


def get_error_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
            callback_data="onb_retry"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
            callback_data="support"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –í –º–µ–Ω—é",
            callback_data="assistant_menu"
        )
    )
    
    return builder.as_markup()