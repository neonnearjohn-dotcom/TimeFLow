"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, Any


def get_settings_keyboard(settings: Dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    Args:
        settings: –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + ("–í–∫–ª ‚úÖ" if settings['notifications_enabled'] else "–í—ã–∫–ª ‚ùå")
    builder.row(
        InlineKeyboardButton(
            text=notifications_text,
            callback_data="toggle_notifications"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    theme_buttons = []
    themes = [
        ('system', 'üì± System'),
        ('light', '‚òÄÔ∏è Light'),
        ('dark', 'üåô Dark')
    ]
    
    current_theme = settings.get('theme', 'system')
    
    for theme_value, theme_text in themes:
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –∫ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
        button_text = theme_text
        if theme_value == current_theme:
            button_text += " ‚úì"
        
        theme_buttons.append(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"set_theme:{theme_value}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–µ–º—ã
    builder.row(
        InlineKeyboardButton(
            text="üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:",
            callback_data="theme_header"  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫
        )
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.row(*theme_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="settings_back_to_main"
        )
    )
    
    return builder.as_markup()