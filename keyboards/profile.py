"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict


def get_profile_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    """
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="view_achievements")
    )
    builder.row(
        InlineKeyboardButton(text="üí∞ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∫–æ–≤", callback_data="points_history")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")
    )
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_profile")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    return builder.as_markup()


def get_achievements_keyboard(has_achievements: bool = True) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    """
    builder = InlineKeyboardBuilder()
    
    if has_achievements:
        builder.row(
            InlineKeyboardButton(text="üèÖ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="all_achievements")
        )
        builder.row(
            InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="achievements_progress")
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile")
    )
    
    return builder.as_markup()


def get_achievement_details_keyboard(achievement_id: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    """
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìä –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_achievement:{achievement_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º", callback_data="view_achievements")
    )
    
    return builder.as_markup()


def get_stats_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìà –ü–æ –º–æ–¥—É–ª—è–º", callback_data="stats_by_module")
    )
    builder.row(
        InlineKeyboardButton(text="üèÜ –†–µ–∫–æ—Ä–¥—ã", callback_data="stats_records")
    )
    builder.row(
        InlineKeyboardButton(text="üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="stats_period")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile")
    )
    
    return builder.as_markup()


def get_achievement_categories_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    """
    builder = InlineKeyboardBuilder()
    
    categories = [
        ("üå± –ü—Ä–∏–≤—ã—á–∫–∏", "ach_cat:habits"),
        ("üéØ –§–æ–∫—É—Å", "ach_cat:focus"),
        ("üìã –ó–∞–¥–∞—á–∏", "ach_cat:tasks"),
        ("üí™ –í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ", "ach_cat:bad_habits"),
        ("‚≠ê –û—Å–æ–±—ã–µ", "ach_cat:special")
    ]
    
    for name, callback in categories:
        builder.row(InlineKeyboardButton(text=name, callback_data=callback))
    
    builder.row(
        InlineKeyboardButton(text="üèÖ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="all_achievements")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_achievements")
    )
    
    return builder.as_markup()


def get_back_to_profile_keyboard() -> InlineKeyboardMarkup:
    """
    –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    """
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile")
    )
    
    return builder.as_markup()