"""
–ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
"""
import os
import shutil

def fix_everything():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    
    print("üîß –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...\n")
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º OpenAI API
    print("1Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ utils/openai_api.py...")
    openai_content = '''"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""
import os
from typing import Optional, Tuple
import logging
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

class OpenAIAssistant:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI GPT API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI"""
        self.api_key = os.getenv('OPENAI_API_KEY', 'your-openai-api-key-here')
        self.model = "gpt-4o-mini"
        self.client = None
        self.is_configured = False
        
        # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
        try:
            if self.api_key and self.api_key != 'your-openai-api-key-here':
                try:
                    from openai import AsyncOpenAI
                    self.client = AsyncOpenAI(api_key=self.api_key)
                    self.is_configured = True
                    print("OpenAI client initialized successfully")
                except ImportError:
                    print("OpenAI library not installed. Using demo mode.")
                except Exception as e:
                    print(f"Could not initialize OpenAI client: {e}")
            else:
                print("OpenAI API key not configured - using demo mode")
        except Exception as e:
            print(f"Error in OpenAI initialization: {e}")
    
    async def get_chat_response(self, user_message: str, context: str = "") -> Tuple[Optional[str], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT"""
        return None, 0  # –î–µ–º–æ-—Ä–µ–∂–∏–º
    
    async def get_scenario_response(self, scenario: str, context: str = "") -> Tuple[Optional[str], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        return None, 0  # –î–µ–º–æ-—Ä–µ–∂–∏–º
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
        return self.is_configured
'''
    
    os.makedirs('utils', exist_ok=True)
    with open('utils/openai_api.py', 'w', encoding='utf-8') as f:
        f.write(openai_content)
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω utils/openai_api.py")
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º main.py
    print("\n2Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ main.py...")
    with open('main.py', 'r', encoding='utf-8') as f:
        main_content = f.read()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç DefaultBotProperties
    if 'DefaultBotProperties' not in main_content:
        main_content = main_content.replace(
            'from aiogram.enums import ParseMode',
            'from aiogram.enums import ParseMode\nfrom aiogram.client.default import DefaultBotProperties'
        )
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞
    old_bot = 'bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)'
    new_bot = '''bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )'''
    
    if old_bot in main_content:
        main_content = main_content.replace(old_bot, new_bot)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ assistant –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
    if '# , assistant' in main_content:
        main_content = main_content.replace('# , assistant', ', assistant')
    if '# dp.include_router(assistant.router)' in main_content:
        main_content = main_content.replace('# dp.include_router(assistant.router)', 'dp.include_router(assistant.router)')
    
    with open('main.py', 'w', encoding='utf-8') as f:
        f.write(main_content)
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω main.py")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º handlers/assistant.py
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ handlers/assistant.py...")
    if not os.path.exists('handlers/assistant.py'):
        print("‚ùå handlers/assistant.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞—é –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é...")
        create_simple_assistant()
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è handle_assistant_menu
        with open('handlers/assistant.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'handle_assistant_menu' not in content:
            print("‚ö†Ô∏è handle_assistant_menu –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ó–∞–º–µ–Ω—è—é –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é...")
            create_simple_assistant()
        else:
            print("‚úÖ handlers/assistant.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # 4. –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π handlers/menu.py –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ handlers/menu.py...")
    fix_menu_handler()
    
    print("\n‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    print("\nüöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
    print("\nüí° –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")
    print("–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env")


def create_simple_assistant():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π handlers/assistant.py"""
    content = '''"""
–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–¥—É–ª—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.main_menu import get_main_menu_keyboard
import logging

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AssistantStates(StatesGroup):
    in_assistant_mode = State()
    chatting = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "ü§ñ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", StateFilter(default_state))
async def handle_assistant_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    
    logger.info(f"Assistant menu opened by user {message.from_user.id}")
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üéØ –ë—ã—Å—Ç—Ä—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data="scenarios")
    builder.button(text="üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç", callback_data="chat")
    builder.button(text="‚ùå –í—ã–π—Ç–∏", callback_data="exit_assistant")
    builder.adjust(2, 1)
    
    await message.answer(
        "ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\\n\\n"
        "–Ø —Ä–∞–±–æ—Ç–∞—é –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∏ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤.\\n\\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AssistantStates.in_assistant_mode)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
@router.callback_query(F.data == "scenarios", AssistantStates.in_assistant_mode)
async def show_scenarios(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å", callback_data="sc:plan")
    builder.button(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="sc:motivation")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üéØ <b>–í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
@router.callback_query(F.data == "exit_assistant")
async def exit_assistant(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    await callback.message.answer(
        "üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.message.delete()
    await state.clear()
    await callback.answer("–í—ã—à–ª–∏ –∏–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
'''
    
    with open('handlers/assistant.py', 'w', encoding='utf-8') as f:
        f.write(content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π handlers/assistant.py")


def fix_menu_handler():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç handlers/menu.py"""
    content = '''"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
"""
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import StateFilter
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é
router = Router()


@router.message(F.text == "üìä –¢—Ä–µ–∫–µ—Ä—ã", StateFilter(default_state))
async def handle_trackers(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¢—Ä–µ–∫–µ—Ä—ã"""
    from handlers import trackers
    await trackers.handle_trackers_menu(message)


@router.message(F.text == "‚úÖ –ß–µ–∫-–ª–∏—Å—Ç", StateFilter(default_state))
async def handle_checklist(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ß–µ–∫-–ª–∏—Å—Ç"""
    from handlers import checklist
    await checklist.handle_checklist_menu(message)


@router.message(F.text == "üéØ –§–æ–∫—É—Å", StateFilter(default_state))
async def handle_focus(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –§–æ–∫—É—Å"""
    from handlers import focus
    await focus.handle_focus_menu(message)


@router.message(F.text == "ü§ñ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", StateFilter(default_state))
async def handle_assistant(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"""
    from handlers import assistant
    await assistant.handle_assistant_menu(message, state)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å", StateFilter(default_state))
async def handle_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ—Ñ–∏–ª—å"""
    from handlers import profile
    await profile.handle_profile_menu(message)


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", StateFilter(default_state))
async def handle_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\\n\\n"
        "üöß –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        parse_mode="HTML"
    )
'''
    
    with open('handlers/menu.py', 'w', encoding='utf-8') as f:
        f.write(content)
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω handlers/menu.py")


if __name__ == "__main__":
    print("üõ† –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\\n")
    print("–≠—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç:")
    print("1. –û—à–∏–±–∫—É OpenAI 'proxies'")
    print("2. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ Bot deprecated")
    print("3. –ü—Ä–æ–±–ª–µ–º—É —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\\n")
    
    response = input("–ù–∞—á–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? (y/n): ")
    if response.lower() == 'y':
        fix_everything()
    else:
        print("–û—Ç–º–µ–Ω–µ–Ω–æ")